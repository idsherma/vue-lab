{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/coa/src/completion.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###*\nMost of the code adopted from the npm package shell completion code.\nSee https://github.com/isaacs/npm/blob/master/lib/completion.js\n###\n\nQ = require 'q'\nescape = require('./shell').escape\nunescape = require('./shell').unescape\n\nmodule.exports = ->\n    @title('Shell completion')\n        .helpful()\n        .arg()\n            .name('raw')\n            .title('Completion words')\n            .arr()\n            .end()\n        .act (opts, args) ->\n            if process.platform == 'win32'\n                e = new Error 'shell completion not supported on windows'\n                e.code = 'ENOTSUP'\n                e.errno = require('constants').ENOTSUP\n                return @reject(e)\n\n            # if the COMP_* isn't in the env, then just dump the script\n            if !process.env.COMP_CWORD? or !process.env.COMP_LINE? or !process.env.COMP_POINT?\n                return dumpScript(@_cmd._name)\n\n            console.error 'COMP_LINE:  %s', process.env.COMP_LINE\n            console.error 'COMP_CWORD: %s', process.env.COMP_CWORD\n            console.error 'COMP_POINT: %s', process.env.COMP_POINT\n            console.error 'args: %j', args.raw\n\n            # completion opts\n            opts = getOpts args.raw\n\n            # cmd\n            { cmd, argv } = @_cmd._parseCmd opts.partialWords\n            Q.when complete(cmd, opts), (compls) ->\n                console.error 'filtered: %j', compls\n                console.log compls.map(escape).join('\\n')\n\n\ndumpScript = (name) ->\n    fs = require 'fs'\n    path = require 'path'\n    defer = Q.defer()\n\n    fs.readFile path.resolve(__dirname, 'completion.sh'), 'utf8', (err, d) ->\n        if err then return defer.reject err\n        d = d.replace(/{{cmd}}/g, path.basename name).replace(/^\\#\\!.*?\\n/, '')\n\n        onError = (err) ->\n            # Darwin is a real dick sometimes.\n            #\n            # This is necessary because the \"source\" or \".\" program in\n            # bash on OS X closes its file argument before reading\n            # from it, meaning that you get exactly 1 write, which will\n            # work most of the time, and will always raise an EPIPE.\n            #\n            # Really, one should not be tossing away EPIPE errors, or any\n            # errors, so casually. But, without this, `. <(cmd completion)`\n            # can never ever work on OS X.\n            if err.errno == require('constants').EPIPE\n                process.stdout.removeListener 'error', onError\n                defer.resolve()\n            else\n                defer.reject(err)\n\n        process.stdout.on 'error', onError\n        process.stdout.write d, -> defer.resolve()\n\n    defer.promise\n\n\ngetOpts = (argv) ->\n    # get the partial line and partial word, if the point isn't at the end\n    # ie, tabbing at: cmd foo b|ar\n    line = process.env.COMP_LINE\n    w = +process.env.COMP_CWORD\n    point = +process.env.COMP_POINT\n    words = argv.map unescape\n    word = words[w]\n    partialLine = line.substr 0, point\n    partialWords = words.slice 0, w\n\n    # figure out where in that last word the point is\n    partialWord = argv[w] or ''\n    i = partialWord.length\n    while partialWord.substr(0, i) isnt partialLine.substr(-1 * i) and i > 0\n        i--\n    partialWord = unescape partialWord.substr 0, i\n    if partialWord then partialWords.push partialWord\n\n    {\n        line: line\n        w: w\n        point: point\n        words: words\n        word: word\n        partialLine: partialLine\n        partialWords: partialWords\n        partialWord: partialWord\n    }\n\n\ncomplete = (cmd, opts) ->\n    compls = []\n\n    # complete on cmds\n    if opts.partialWord.indexOf('-')\n        compls = Object.keys(cmd._cmdsByName)\n        # Complete on required opts without '-' in last partial word\n        # (if required not already specified)\n        #\n        # Commented out because of uselessness:\n        # -b, --block suggest results in '-' on cmd line;\n        # next completion suggest all options, because of '-'\n        #.concat Object.keys(cmd._optsByKey).filter (v) -> cmd._optsByKey[v]._req\n    else\n        # complete on opt values: --opt=| case\n        if m = opts.partialWord.match /^(--\\w[\\w-_]*)=(.*)$/\n            optWord = m[1]\n            optPrefix = optWord + '='\n        else\n            # complete on opts\n            # don't complete on opts in case of --opt=val completion\n            # TODO: don't complete on opts in case of unknown arg after commands\n            # TODO: complete only on opts with arr() or not already used\n            # TODO: complete only on full opts?\n            compls = Object.keys cmd._optsByKey\n\n    # complete on opt values: next arg case\n    if not (o = opts.partialWords[opts.w - 1]).indexOf '-'\n        optWord = o\n\n    # complete on opt values: completion\n    if optWord and opt = cmd._optsByKey[optWord]\n        if not opt._flag and opt._comp\n            compls = Q.join compls, Q.when opt._comp(opts), (c, o) ->\n                c.concat o.map (v) -> (optPrefix or '') + v\n\n    # TODO: complete on args values (context aware, custom completion?)\n\n    # custom completion on cmds\n    if cmd._comp\n        compls = Q.join compls, Q.when(cmd._comp(opts)), (c, o) ->\n            c.concat o\n\n    # TODO: context aware custom completion on cmds, opts and args\n    # (can depend on already entered values, especially options)\n\n    Q.when compls, (compls) ->\n        console.error 'partialWord: %s', opts.partialWord\n        console.error 'compls: %j', compls\n        compls.filter (c) -> c.indexOf(opts.partialWord) is 0\n"
  ]
}