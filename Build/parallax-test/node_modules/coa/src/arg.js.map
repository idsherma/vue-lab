{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/coa/src/arg.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA;;EAAA,KAAA,GAAQ,OAAA,CAAQ,SAAR,CAAkB,CAAC;;EAC3B,GAAA,GAAM,OAAA,CAAQ,OAAR,CAAgB,CAAC;;EACvB,GAAA,GAAM,OAAA,CAAQ,OAAR,CAAgB,CAAC;;;AAEvB;;;;;;;;EAOA,OAAO,CAAC,GAAR,GAAoB;;AAEhB;;;;IAIa,aAAC,IAAD;MAAC,IAAC,CAAA,OAAD;MAAU,IAAC,CAAA,IAAI,CAAC,KAAK,CAAC,IAAZ,CAAiB,IAAjB;IAAX;;;AAEb;;;;;;kBAKA,IAAA,GAAM,GAAG,CAAA,SAAE,CAAA;;;AAEX;;;;;;kBAKA,KAAA,GAAO,GAAG,CAAA,SAAE,CAAA;;;AAEZ;;;;;;kBAKA,GAAA,GAAK,GAAG,CAAA,SAAE,CAAA;;;AAEV;;;;;kBAIA,GAAA,GAAK,GAAG,CAAA,SAAE,CAAA;;;AAEV;;;;;;;;;;kBASA,GAAA,GAAK,GAAG,CAAA,SAAE,CAAA;;;AAEV;;;;;;;kBAMA,GAAA,GAAK,GAAG,CAAA,SAAE,CAAA;;;AAEV;;;;;;;;;;kBASA,IAAA,GAAM,GAAG,CAAA,SAAE,CAAA;;;AAEX;;;;;;kBAKA,KAAA,GAAO,GAAG,CAAA,SAAE,CAAA;;;AAEZ;;;;;;kBAKA,MAAA,GAAQ,GAAG,CAAA,SAAE,CAAA;;kBAEb,MAAA,GAAQ,SAAC,GAAD,EAAM,IAAN;aACJ,IAAC,CAAA,QAAD,CAAU,IAAV,EAAgB,GAAhB;IADI;;kBAGR,QAAA,GAAU,GAAG,CAAA,SAAE,CAAA;;kBAEf,YAAA,GAAc,SAAC,IAAD,EAAO,IAAP;aAAgB,CAAI,IAAI,CAAC,cAAL,CAAoB,IAAC,CAAA,KAArB;IAApB;;kBAEd,MAAA,GAAQ,SAAA;AACJ,UAAA;MAAA,GAAA,GAAM;MAEN,GAAG,CAAC,IAAJ,CAAS,KAAA,CAAM,SAAN,EAAiB,IAAC,CAAA,KAAK,CAAC,WAAP,CAAA,CAAjB,CAAT,EAAiD,KAAjD,EAAwD,IAAC,CAAA,MAAzD;MACA,IAAG,IAAC,CAAA,IAAJ;QAAc,GAAG,CAAC,IAAJ,CAAS,GAAT,EAAc,KAAA,CAAM,MAAN,EAAc,YAAd,CAAd,EAAd;;aAEA,GAAG,CAAC,IAAJ,CAAS,EAAT;IANI;;kBAQR,aAAA,GAAe,SAAA;aAAG,gCAAA,GAAmC,IAAC,CAAA,MAAD,CAAA;IAAtC;;;AAEf;;;;;;;;;kBAQA,MAAA,GAAQ,GAAG,CAAA,SAAE,CAAA;;;AAEb;;;;;kBAIA,GAAA,GAAK,GAAG,CAAA,SAAE,CAAA;;;AAEV;;;;;;;kBAMA,KAAA,GAAO,GAAG,CAAA,SAAE,CAAA;;;;;AAjIhB",
  "sourcesContent": [
    "Color = require('./color').Color\nCmd = require('./cmd').Cmd\nOpt = require('./opt').Opt\n\n###*\nArgument\n\nUnnamed entity. From command line arguments passed as list of unnamed values.\n@namespace\n@class Presents argument\n###\nexports.Arg = class Arg\n\n    ###*\n    @constructs\n    @param {COA.Cmd} cmd parent command\n    ###\n    constructor: (@_cmd) -> @_cmd._args.push @\n\n    ###*\n    Set a canonical argument identifier to be used anywhere in text messages.\n    @param {String} _name argument name\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    name: Opt::name\n\n    ###*\n    Set a long description for argument to be used anywhere in text messages.\n    @param {String} _title argument title\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    title: Cmd::title\n\n    ###*\n    Makes an argument accepts multiple values.\n    Otherwise, the value will be used by the latter passed.\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    arr: Opt::arr\n\n    ###*\n    Makes an argument required.\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    req: Opt::req\n\n    ###*\n    Set a validation (or value) function for argument.\n    Value from command line passes through before becoming available from API.\n    Using for validation and convertion simple types to any values.\n    @param {Function} _val validating function,\n        invoked in the context of argument instance\n        and has one parameter with value from command line\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    val: Opt::val\n\n    ###*\n    Set a default value for argument.\n    Default value passed through validation function as ordinary value.\n    @param {Object} _def\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    def: Opt::def\n\n    ###*\n    Set custom additional completion for current argument.\n    @param {Function} completion generation function,\n        invoked in the context of argument instance.\n        Accepts parameters:\n            - {Object} opts completion options\n        It can return promise or any other value treated as result.\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    comp: Cmd::comp\n\n    ###*\n    Make argument value inputting stream.\n    It's add useful validation and shortcut for STDIN.\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    input: Opt::input\n\n    ###*\n    Make argument value outputing stream.\n    It's add useful validation and shortcut for STDOUT.\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    output: Opt::output\n\n    _parse: (arg, args) ->\n        @_saveVal(args, arg)\n\n    _saveVal: Opt::_saveVal\n\n    _checkParsed: (opts, args) -> not args.hasOwnProperty(@_name)\n\n    _usage: ->\n        res = []\n\n        res.push Color('lpurple', @_name.toUpperCase()), ' : ', @_title\n        if @_req then res.push ' ', Color('lred', '(required)')\n\n        res.join ''\n\n    _requiredText: -> 'Missing required argument:\\n  ' + @_usage()\n\n    ###*\n    Return rejected promise with error code.\n    Use in .val() for return with error.\n    @param {Object} reject reason\n        You can customize toString() method and exitCode property\n        of reason object.\n    @returns {Q.promise} rejected promise\n    ###\n    reject: Cmd::reject\n\n    ###*\n    Finish chain for current option and return parent command instance.\n    @returns {COA.Cmd} parent command\n    ###\n    end: Cmd::end\n\n    ###*\n    Apply function with arguments in context of arg instance.\n    @param {Function} fn\n    @param {Array} args\n    @returns {COA.Arg} this instance (for chainability)\n    ###\n    apply: Cmd::apply\n"
  ]
}