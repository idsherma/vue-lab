{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/coa/src/cmd.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "UTIL = require 'util'\nPATH = require 'path'\nColor = require('./color').Color\nQ = require('q')\n\n#inspect = require('eyes').inspector { maxLength: 99999, stream: process.stderr }\n\n###*\nCommand\n\nTop level entity. Commands may have options and arguments.\n@namespace\n@class Presents command\n###\nexports.Cmd = class Cmd\n\n    ###*\n    @constructs\n    @param {COA.Cmd} [cmd] parent command\n    ###\n    constructor: (cmd) ->\n        if this not instanceof Cmd\n            return new Cmd cmd\n\n        @_parent cmd\n\n        @_cmds = []\n        @_cmdsByName = {}\n\n        @_opts = []\n        @_optsByKey = {}\n\n        @_args = []\n\n        @_ext = false\n\n    @get: (propertyName, func) ->\n        Object.defineProperty @::, propertyName,\n            configurable: true\n            enumerable: true\n            get: func\n\n    ###*\n    Returns object containing all its subcommands as methods\n    to use from other programs.\n    @returns {Object}\n    ###\n    @get 'api', () ->\n        if not @_api\n            @_api = => @invoke.apply @, arguments\n        for c of @_cmdsByName\n            do (c) =>\n                @_api[c] = @_cmdsByName[c].api\n        @_api\n\n    _parent: (cmd) ->\n        @_cmd = cmd or this\n        if cmd\n            cmd._cmds.push @\n            if @_name then @_cmd._cmdsByName[@_name] = @\n        @\n\n    ###*\n    Set a canonical command identifier to be used anywhere in the API.\n    @param {String} _name command name\n    @returns {COA.Cmd} this instance (for chainability)\n    ###\n    name: (@_name) ->\n        if @_cmd isnt @ then @_cmd._cmdsByName[_name] = @\n        @\n\n    ###*\n    Set a long description for command to be used anywhere in text messages.\n    @param {String} _title command title\n    @returns {COA.Cmd} this instance (for chainability)\n    ###\n    title: (@_title) -> @\n\n    ###*\n    Create new or add existing subcommand for current command.\n    @param {COA.Cmd} [cmd] existing command instance\n    @returns {COA.Cmd} new subcommand instance\n    ###\n    cmd: (cmd) ->\n        if cmd then cmd._parent @\n        else new Cmd @\n\n    ###*\n    Create option for current command.\n    @returns {COA.Opt} new option instance\n    ###\n    opt: -> new (require('./opt').Opt) @\n\n    ###*\n    Create argument for current command.\n    @returns {COA.Opt} new argument instance\n    ###\n    arg: -> new (require('./arg').Arg) @\n\n    ###*\n    Add (or set) action for current command.\n    @param {Function} act action function,\n        invoked in the context of command instance\n        and has the parameters:\n            - {Object} opts parsed options\n            - {Array} args parsed arguments\n            - {Object} res actions result accumulator\n        It can return rejected promise by Cmd.reject (in case of error)\n        or any other value treated as result.\n    @param {Boolean} [force=false] flag for set action instead add to existings\n    @returns {COA.Cmd} this instance (for chainability)\n    ###\n    act: (act, force) ->\n        return @ unless act\n\n        if not force and @_act\n            @_act.push act\n        else\n            @_act = [act]\n\n        @\n\n    ###*\n    Set custom additional completion for current command.\n    @param {Function} completion generation function,\n        invoked in the context of command instance.\n        Accepts parameters:\n            - {Object} opts completion options\n        It can return promise or any other value treated as result.\n    @returns {COA.Cmd} this instance (for chainability)\n    ###\n    comp: (@_comp) -> @\n\n    ###*\n    Apply function with arguments in context of command instance.\n    @param {Function} fn\n    @param {Array} args\n    @returns {COA.Cmd} this instance (for chainability)\n    ###\n    apply: (fn, args...) ->\n        fn.apply this, args\n        @\n\n    ###*\n    Make command \"helpful\", i.e. add -h --help flags for print usage.\n    @returns {COA.Cmd} this instance (for chainability)\n    ###\n    helpful: ->\n        @opt()\n            .name('help').title('Help')\n            .short('h').long('help')\n            .flag()\n            .only()\n            .act ->\n                return @usage()\n            .end()\n\n    ###*\n    Adds shell completion to command, adds \"completion\" subcommand,\n    that makes all the magic.\n    Must be called only on root command.\n    @returns {COA.Cmd} this instance (for chainability)\n    ###\n    completable: ->\n        @cmd()\n            .name('completion')\n            .apply(require './completion')\n            .end()\n\n    ###*\n    Allow command to be extendable by external node.js modules.\n    @param {String} [pattern]  Pattern of node.js module to find subcommands at.\n    @returns {COA.Cmd} this instance (for chainability)\n    ###\n    extendable: (pattern) ->\n        @_ext = pattern or true\n        @\n\n    _exit: (msg, code) ->\n        process.once 'exit', ->\n            if msg then console.error msg\n            process.exit code or 0\n\n    ###*\n    Build full usage text for current command instance.\n    @returns {String} usage text\n    ###\n    usage: ->\n        res = []\n\n        if @_title then res.push @_fullTitle()\n\n        res.push('', 'Usage:')\n\n        if @_cmds.length then res.push(['', '',\n            Color('lred', @_fullName()),\n            Color('lblue', 'COMMAND'),\n            Color('lgreen', '[OPTIONS]'),\n            Color('lpurple', '[ARGS]')].join ' ')\n\n        if @_opts.length + @_args.length then res.push(['', '',\n            Color('lred', @_fullName()),\n            Color('lgreen', '[OPTIONS]'),\n            Color('lpurple', '[ARGS]')].join ' ')\n\n        res.push(\n            @_usages(@_cmds, 'Commands'),\n            @_usages(@_opts, 'Options'),\n            @_usages(@_args, 'Arguments'))\n\n        res.join '\\n'\n\n    _usage: ->\n        Color('lblue', @_name) + ' : ' + @_title\n\n    _usages: (os, title) ->\n        unless os.length then return\n        res = ['', title + ':']\n        for o in os\n            res.push '  ' + o._usage()\n        res.join '\\n'\n\n    _fullTitle: ->\n        (if @_cmd is this then '' else @_cmd._fullTitle() + '\\n') + @_title\n\n    _fullName: ->\n        (if this._cmd is this then '' else @_cmd._fullName() + ' ') + PATH.basename(@_name)\n\n    _ejectOpt: (opts, opt) ->\n        if (pos = opts.indexOf(opt)) >= 0\n            if opts[pos]._arr\n                opts[pos]\n            else\n                opts.splice(pos, 1)[0]\n\n    _checkRequired: (opts, args) ->\n        if not (@_opts.filter (o) -> o._only and o._name of opts).length\n            all = @_opts.concat @_args\n            while i = all.shift()\n                if i._req and i._checkParsed opts, args\n                    return @reject i._requiredText()\n\n    _parseCmd: (argv, unparsed = []) ->\n        argv = argv.concat()\n        optSeen = false\n        while i = argv.shift()\n            if not i.indexOf '-'\n                optSeen = true\n            if not optSeen and /^\\w[\\w-_]*$/.test(i)\n                cmd = @_cmdsByName[i]\n\n                if not cmd and @_ext\n                    # construct package name to require\n                    if typeof @_ext is 'string'\n                        if ~@_ext.indexOf('%s')\n                            # use formatted string\n                            pkg = UTIL.format(@_ext, i)\n                        else\n                            # just append subcommand name to the prefix\n                            pkg = @_ext + i\n                    else if @_ext is true\n                        # use default scheme: <command>-<subcommand>-<subcommand> and so on\n                        pkg = i\n                        c = @\n                        loop\n                            pkg = c._name + '-' + pkg\n                            if c._cmd is c then break\n                            c = c._cmd\n\n                    try\n                        cmdDesc = require(pkg)\n                    catch e\n\n                    if cmdDesc\n                        if typeof cmdDesc == 'function'\n                            # set create subcommand, set its name and apply imported function\n                            @cmd()\n                                .name(i)\n                                .apply(cmdDesc)\n                                .end()\n                        else if typeof cmdDesc == 'object'\n                            # register subcommand\n                            @cmd(cmdDesc)\n                            # set command name\n                            cmdDesc.name(i)\n                        else\n                            throw new Error 'Error: Unsupported command declaration type, ' +\n                                'should be function or COA.Cmd() object'\n                        cmd = @_cmdsByName[i]\n                if cmd\n                    return cmd._parseCmd argv, unparsed\n\n            unparsed.push i\n\n        { cmd: @, argv: unparsed }\n\n    _parseOptsAndArgs: (argv) ->\n        opts = {}\n        args = {}\n\n        nonParsedOpts = @_opts.concat()\n        nonParsedArgs = @_args.concat()\n\n        while i = argv.shift()\n            # opt\n            if i isnt '--' and not i.indexOf '-'\n\n                if m = i.match /^(--\\w[\\w-_]*)=(.*)$/\n                    i = m[1]\n\n                    # suppress 'unknown argument' error for flag options with values\n                    if not @_optsByKey[i]._flag\n                        argv.unshift m[2]\n\n                if opt = @_ejectOpt nonParsedOpts, @_optsByKey[i]\n                    if Q.isRejected(res = opt._parse argv, opts)\n                        return res\n                else\n                    return @reject \"Unknown option: #{ i }\"\n\n            # arg\n            else\n                if i is '--'\n                    i = argv.splice(0)\n\n                i = if Array.isArray(i) then i else [i]\n\n                while a = i.shift()\n                    if arg = nonParsedArgs.shift()\n                        if arg._arr then nonParsedArgs.unshift arg\n                        if Q.isRejected(res = arg._parse a, args)\n                            return res\n                    else\n                        return @reject \"Unknown argument: #{ a }\"\n\n        # set defaults\n        {\n            opts: @_setDefaults(opts, nonParsedOpts),\n            args: @_setDefaults(args, nonParsedArgs)\n        }\n\n    _setDefaults: (params, desc) ->\n        for i in desc\n            if i._name not of params and '_def' of i\n                i._saveVal params, i._def\n        params\n\n    _processParams: (params, desc) ->\n        notExists = []\n        for i in desc\n            n = i._name\n            if n not of params\n                notExists.push i\n                continue\n\n            vals = params[n]\n            delete params[n]\n            if not Array.isArray vals\n                vals = [vals]\n\n            for v in vals\n                if Q.isRejected(res = i._saveVal(params, v))\n                    return res\n\n        # set defaults\n        @_setDefaults params, notExists\n\n    _parseArr: (argv) ->\n        Q.when @_parseCmd(argv), (p) ->\n            Q.when p.cmd._parseOptsAndArgs(p.argv), (r) ->\n                { cmd: p.cmd, opts: r.opts, args: r.args }\n\n    _do: (input) ->\n        Q.when input, (input) =>\n            cmd = input.cmd\n            [@_checkRequired].concat(cmd._act or []).reduce(\n                (res, act) ->\n                    Q.when res, (res) ->\n                        act.call(\n                            cmd\n                            input.opts\n                            input.args\n                            res)\n                undefined\n            )\n\n    ###*\n    Parse arguments from simple format like NodeJS process.argv\n    and run ahead current program, i.e. call process.exit when all actions done.\n    @param {Array} argv\n    @returns {COA.Cmd} this instance (for chainability)\n    ###\n    run: (argv = process.argv.slice(2)) ->\n        cb = (code) => (res) =>\n            if res\n                @_exit res.stack ? res.toString(), res.exitCode ? code\n            else\n                @_exit()\n        Q.when(@do(argv), cb(0), cb(1)).done()\n        @\n\n    ###*\n    Convenient function to run command from tests.\n    @param {Array} argv\n    @returns {Q.Promise}\n    ###\n    do: (argv) ->\n        @_do(@_parseArr argv || [])\n\n    ###*\n    Invoke specified (or current) command using provided\n    options and arguments.\n    @param {String|Array} cmds  subcommand to invoke (optional)\n    @param {Object} opts  command options (optional)\n    @param {Object} args  command arguments (optional)\n    @returns {Q.Promise}\n    ###\n    invoke: (cmds = [], opts = {}, args = {}) ->\n        if typeof cmds == 'string'\n            cmds = cmds.split(' ')\n\n        if arguments.length < 3\n            if not Array.isArray cmds\n                args = opts\n                opts = cmds\n                cmds = []\n\n        Q.when @_parseCmd(cmds), (p) =>\n            if p.argv.length\n                return @reject \"Unknown command: \" + cmds.join ' '\n\n            Q.all([@_processParams(opts, @_opts), @_processParams(args, @_args)])\n                .spread (opts, args) =>\n                    @_do({ cmd: p.cmd, opts: opts, args: args })\n                        # catch fails from .only() options\n                        .fail (res) =>\n                            if res and res.exitCode is 0\n                                res.toString()\n                            else\n                                @reject(res)\n\n    ###*\n    Return reject of actions results promise with error code.\n    Use in .act() for return with error.\n    @param {Object} reject reason\n        You can customize toString() method and exitCode property\n        of reason object.\n    @returns {Q.promise} rejected promise\n    ###\n    reject: (reason) -> Q.reject(reason)\n\n    ###*\n    Finish chain for current subcommand and return parent command instance.\n    @returns {COA.Cmd} parent command\n    ###\n    end: -> @_cmd\n"
  ]
}