{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/coa/src/opt.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "fs = require 'fs'\nQ = require 'q'\nColor = require('./color').Color\nCmd = require('./cmd').Cmd\n\n###*\nOption\n\nNamed entity. Options may have short and long keys for use from command line.\n@namespace\n@class Presents option\n###\nexports.Opt = class Opt\n\n    ###*\n    @constructs\n    @param {COA.Cmd} cmd parent command\n    ###\n    constructor: (@_cmd) -> @_cmd._opts.push @\n\n    ###*\n    Set a canonical option identifier to be used anywhere in the API.\n    @param {String} _name option name\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    name: (@_name) -> @\n\n    ###*\n    Set a long description for option to be used anywhere in text messages.\n    @param {String} _title option title\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    title: Cmd::title\n\n    ###*\n    Set a short key for option to be used with one hyphen from command line.\n    @param {String} _short\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    short: (@_short) -> @_cmd._optsByKey['-' + _short] = @\n\n    ###*\n    Set a short key for option to be used with double hyphens from command line.\n    @param {String} _long\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    long: (@_long) -> @_cmd._optsByKey['--' + _long] = @\n\n    ###*\n    Make an option boolean, i.e. option without value.\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    flag: () ->\n        @_flag = true\n        @\n\n    ###*\n    Makes an option accepts multiple values.\n    Otherwise, the value will be used by the latter passed.\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    arr: ->\n        @_arr = true\n        @\n\n    ###*\n    Makes an option required.\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    req: ->\n        @_req = true\n        @\n\n    ###*\n    Makes an option to act as a command,\n    i.e. program will exit just after option action.\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    only: ->\n        @_only = true\n        @\n\n    ###*\n    Set a validation (or value) function for option.\n    Value from command line passes through before becoming available from API.\n    Using for validation and convertion simple types to any values.\n    @param {Function} _val validating function,\n        invoked in the context of option instance\n        and has one parameter with value from command line\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    val: (@_val) -> @\n\n    ###*\n    Set a default value for option.\n    Default value passed through validation function as ordinary value.\n    @param {Object} _def\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    def: (@_def) -> @\n\n    ###*\n    Make option value inputting stream.\n    It's add useful validation and shortcut for STDIN.\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    input: ->\n        # XXX: hack to workaround a bug in node 0.6.x,\n        # see https://github.com/joyent/node/issues/2130\n        process.stdin.pause();\n\n        @\n            .def(process.stdin)\n            .val (v) ->\n                if typeof v is 'string'\n                    if v is '-'\n                        process.stdin\n                    else\n                        s = fs.createReadStream v, { encoding: 'utf8' }\n                        s.pause()\n                        s\n                else v\n\n    ###*\n    Make option value outputing stream.\n    It's add useful validation and shortcut for STDOUT.\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    output: ->\n        @\n            .def(process.stdout)\n            .val (v) ->\n                if typeof v is 'string'\n                    if v is '-'\n                        process.stdout\n                    else\n                        fs.createWriteStream v, { encoding: 'utf8' }\n                else v\n\n    ###*\n    Add action for current option command.\n    This action is performed if the current option\n    is present in parsed options (with any value).\n    @param {Function} act action function,\n        invoked in the context of command instance\n        and has the parameters:\n            - {Object} opts parsed options\n            - {Array} args parsed arguments\n            - {Object} res actions result accumulator\n        It can return rejected promise by Cmd.reject (in case of error)\n        or any other value treated as result.\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    act: (act) ->\n        opt = @\n        name = @_name\n        @_cmd.act (opts) ->\n            if name of opts\n                res = act.apply @, arguments\n                if opt._only\n                    Q.when res, (res) =>\n                        @reject {\n                            toString: -> res.toString()\n                            exitCode: 0\n                        }\n                else\n                    res\n        @\n\n    ###*\n    Set custom additional completion for current option.\n    @param {Function} completion generation function,\n        invoked in the context of option instance.\n        Accepts parameters:\n            - {Object} opts completion options\n        It can return promise or any other value treated as result.\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    comp: Cmd::comp\n\n    _saveVal: (opts, val) ->\n        if @_val then val = @_val val\n        if @_arr\n            (opts[@_name] or= []).push val\n        else\n            opts[@_name] = val\n        val\n\n    _parse: (argv, opts) ->\n        @_saveVal(\n            opts,\n            if @_flag\n                true\n            else\n                argv.shift()\n        )\n\n    _checkParsed: (opts, args) -> not opts.hasOwnProperty @_name\n\n    _usage: ->\n        res = []\n        nameStr = @_name.toUpperCase()\n\n        if @_short\n            res.push '-', Color 'lgreen', @_short\n            unless @_flag then res.push ' ' + nameStr\n            res.push ', '\n\n        if @_long\n            res.push '--', Color 'green', @_long\n            unless @_flag then res.push '=' + nameStr\n\n        res.push ' : ', @_title\n\n        if @_req then res.push ' ', Color('lred', '(required)')\n\n        res.join ''\n\n    _requiredText: -> 'Missing required option:\\n  ' + @_usage()\n\n    ###*\n    Return rejected promise with error code.\n    Use in .val() for return with error.\n    @param {Object} reject reason\n        You can customize toString() method and exitCode property\n        of reason object.\n    @returns {Q.promise} rejected promise\n    ###\n    reject: Cmd::reject\n\n    ###*\n    Finish chain for current option and return parent command instance.\n    @returns {COA.Cmd} parent command\n    ###\n    end: Cmd::end\n\n    ###*\n    Apply function with arguments in context of option instance.\n    @param {Function} fn\n    @param {Array} args\n    @returns {COA.Opt} this instance (for chainability)\n    ###\n    apply: Cmd::apply\n"
  ]
}