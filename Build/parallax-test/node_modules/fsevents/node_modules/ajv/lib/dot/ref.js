if(undefined==window.JST){window.JST={};} window.JST["ref"] = function(obj){var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('{{# def.definitions }}\n{{# def.errors }}\n{{# def.setupKeyword }}\n\n{{## def._validateRef:_v:\n  {{? it.opts.passContext }}\n    {{=_v}}.call(this,\n  {{??}}\n    {{=_v}}(\n  {{?}}\n    {{=$data}}, {{# def.dataPath }}{{# def.passParentData }}, rootData)\n#}}\n\n{{ var $async, $refCode; }}\n{{? $schema == \'#\' || $schema == \'#/\' }}\n  {{\n    if (it.isRoot) {\n      $async = it.async;\n      $refCode = \'validate\';\n    } else {\n      $async = it.root.schema.$async === true;\n      $refCode = \'root.refVal[0]\';\n    }\n  }}\n{{??}}\n  {{ var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot); }}\n  {{? $refVal === undefined }}\n    {{ var $message = \'can\\\'t resolve reference \' + $schema + \' from id \' + it.baseId; }}\n    {{? it.opts.missingRefs == \'fail\' }}\n      {{ console.log($message); }}\n      {{# def.error:\'$ref\' }}\n      {{? $breakOnError }} if (false) { {{?}}\n    {{?? it.opts.missingRefs == \'ignore\' }}\n      {{ console.log($message); }}\n      {{? $breakOnError }} if (true) { {{?}}\n    {{??}}\n      {{\n        var $error = new Error($message);\n        $error.missingRef = it.resolve.url(it.baseId, $schema);\n        $error.missingSchema = it.resolve.normalizeId(it.resolve.fullPath($error.missingRef));\n        throw $error;\n      }}\n    {{?}}\n  {{?? $refVal.inline }}\n    {{# def.setupNextLevel }}\n    {{\n      $it.schema = $refVal.schema;\n      $it.schemaPath = \'\';\n      $it.errSchemaPath = $schema;\n    }}\n    {{ var $code = it.validate($it).replace(/validate\\.schema/g, $refVal.code); }}\n    {{= $code }}\n    {{? $breakOnError}}\n      if ({{=$nextValid}}) {\n    {{?}}\n  {{??}}\n    {{\n      $async = $refVal.$async === true;\n      $refCode = $refVal.code;\n    }}\n  {{?}}\n{{?}}\n\n{{? $refCode }}\n  {{# def.beginDefOut}}\n    {{# def._validateRef:$refCode }}\n  {{# def.storeDefOut:__callValidate }}\n\n  {{? $async }}\n    {{ if (!it.async) throw new Error(\'async schema referenced by sync schema\'); }}\n    try { {{? $breakOnError }}var {{=$valid}} ={{?}} {{=it.yieldAwait}} {{=__callValidate}}; }\n    catch (e) {\n      if (!(e instanceof ValidationError)) throw e;\n      if (vErrors === null) vErrors = e.errors;\n      else vErrors = vErrors.concat(e.errors);\n      errors = vErrors.length;\n    }\n    {{? $breakOnError }} if ({{=$valid}}) { {{?}}\n  {{??}}\n    if (!{{=__callValidate}}) {\n      if (vErrors === null) vErrors = {{=$refCode}}.errors;\n      else vErrors = vErrors.concat({{=$refCode}}.errors);\n      errors = vErrors.length;\n    } {{? $breakOnError }} else { {{?}}\n  {{?}}\n{{?}}\n');}return __p.join('');}