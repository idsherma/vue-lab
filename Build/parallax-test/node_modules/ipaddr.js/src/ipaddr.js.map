{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/ipaddr.js/src/ipaddr.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Define the main object\nipaddr = {}\n\nroot = this\n\n# Export for both the CommonJS and browser-like environment\nif module? && module.exports\n  module.exports = ipaddr\nelse\n  root['ipaddr'] = ipaddr\n\n# A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.\nmatchCIDR = (first, second, partSize, cidrBits) ->\n  if first.length != second.length\n    throw new Error \"ipaddr: cannot match CIDR for objects with different lengths\"\n\n  part = 0\n  while cidrBits > 0\n    shift = partSize - cidrBits\n    shift = 0 if shift < 0\n\n    if first[part] >> shift != second[part] >> shift\n      return false\n\n    cidrBits -= partSize\n    part     += 1\n\n  return true\n\n# An utility function to ease named range matching. See examples below.\n# rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors\n# on matching IPv4 addresses to IPv6 ranges or vice versa.\nipaddr.subnetMatch = (address, rangeList, defaultName='unicast') ->\n  for rangeName, rangeSubnets of rangeList\n    # ECMA5 Array.isArray isn't available everywhere\n    if rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)\n      rangeSubnets = [ rangeSubnets ]\n\n    for subnet in rangeSubnets\n      if address.kind() == subnet[0].kind()\n        if address.match.apply(address, subnet)\n          return rangeName\n\n  return defaultName\n\n# An IPv4 address (RFC791).\nclass ipaddr.IPv4\n  # Constructs a new IPv4 address from an array of four octets\n  # in network order (MSB first)\n  # Verifies the input.\n  constructor: (octets) ->\n    if octets.length != 4\n      throw new Error \"ipaddr: ipv4 octet count should be 4\"\n\n    for octet in octets\n      if !(0 <= octet <= 255)\n        throw new Error \"ipaddr: ipv4 octet should fit in 8 bits\"\n\n    @octets = octets\n\n  # The 'kind' method exists on both IPv4 and IPv6 classes.\n  kind: ->\n    return 'ipv4'\n\n  # Returns the address in convenient, decimal-dotted format.\n  toString: ->\n    return @octets.join \".\"\n\n  # Symmetrical method strictly for aligning with the IPv6 methods.\n  toNormalizedString: ->\n    return this.toString()\n\n  # Returns an array of byte-sized values in network order (MSB first)\n  toByteArray: ->\n    return @octets.slice(0) # octets.clone\n\n  # Checks if this address matches other one within given CIDR range.\n  match: (other, cidrRange) ->\n    if cidrRange == undefined\n      [other, cidrRange] = other\n\n    if other.kind() != 'ipv4'\n      throw new Error \"ipaddr: cannot match ipv4 address with non-ipv4 one\"\n\n    return matchCIDR(this.octets, other.octets, 8, cidrRange)\n\n  # Special IPv4 address ranges.\n  # See also https://en.wikipedia.org/wiki/Reserved_IP_addresses\n  SpecialRanges:\n    unspecified: [\n      [ new IPv4([0,     0,    0,   0]),  8 ]\n    ]\n    broadcast: [\n      [ new IPv4([255, 255,  255, 255]), 32 ]\n    ]\n    multicast: [ # RFC3171\n      [ new IPv4([224,   0,    0,   0]), 4  ]\n    ]\n    linkLocal: [ # RFC3927\n      [ new IPv4([169,   254,  0,   0]), 16 ]\n    ]\n    loopback: [ # RFC5735\n      [ new IPv4([127,   0,    0,   0]), 8  ]\n    ]\n    carrierGradeNat: [ # RFC6598\n      [ new IPv4([100,   64,   0,   0]), 10 ]\n    ]\n    private: [ # RFC1918\n      [ new IPv4([10,    0,    0,   0]), 8  ]\n      [ new IPv4([172,   16,   0,   0]), 12 ]\n      [ new IPv4([192,   168,  0,   0]), 16 ]\n    ]\n    reserved: [ # Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700\n      [ new IPv4([192,   0,    0,   0]), 24 ]\n      [ new IPv4([192,   0,    2,   0]), 24 ]\n      [ new IPv4([192,  88,   99,   0]), 24 ]\n      [ new IPv4([198,  51,  100,   0]), 24 ]\n      [ new IPv4([203,   0,  113,   0]), 24 ]\n      [ new IPv4([240,   0,    0,   0]), 4  ]\n    ]\n\n  # Checks if the address corresponds to one of the special ranges.\n  range: ->\n    return ipaddr.subnetMatch(this, @SpecialRanges)\n\n  # Convrets this IPv4 address to an IPv4-mapped IPv6 address.\n  toIPv4MappedAddress: ->\n    return ipaddr.IPv6.parse \"::ffff:#{@toString()}\"\n\n  # returns a number of leading ones in IPv4 address, making sure that\n  # the rest is a solid sequence of 0's (valid netmask)\n  # returns either the CIDR length or null if mask is not valid\n  prefixLengthFromSubnetMask: ->\n    # number of zeroes in octet\n    zerotable =\n      0:   8\n      128: 7\n      192: 6\n      224: 5\n      240: 4\n      248: 3\n      252: 2\n      254: 1\n      255: 0\n\n    cidr = 0\n    # non-zero encountered stop scanning for zeroes\n    stop = false\n    for i in [3..0] by -1\n      octet = @octets[i]\n      if octet of zerotable\n        zeros = zerotable[octet]\n        if stop and zeros != 0\n          return null\n        unless zeros == 8\n          stop = true\n        cidr += zeros\n      else\n        return null\n    return 32 - cidr\n\n# A list of regular expressions that match arbitrary IPv4 addresses,\n# for which a number of weird notations exist.\n# Note that an address like 0010.0xa5.1.1 is considered legal.\nipv4Part = \"(0?\\\\d+|0x[a-f0-9]+)\"\nipv4Regexes =\n  fourOctet: new RegExp \"^#{ipv4Part}\\\\.#{ipv4Part}\\\\.#{ipv4Part}\\\\.#{ipv4Part}$\", 'i'\n  longValue: new RegExp \"^#{ipv4Part}$\", 'i'\n\n# Classful variants (like a.b, where a is an octet, and b is a 24-bit\n# value representing last three octets; this corresponds to a class C\n# address) are omitted due to classless nature of modern Internet.\nipaddr.IPv4.parser = (string) ->\n  parseIntAuto = (string) ->\n    if string[0] == \"0\" && string[1] != \"x\"\n      parseInt(string, 8)\n    else\n      parseInt(string)\n\n  # parseInt recognizes all that octal & hexadecimal weirdness for us\n  if match = string.match(ipv4Regexes.fourOctet)\n    return (parseIntAuto(part) for part in match[1..5])\n  else if match = string.match(ipv4Regexes.longValue)\n    value = parseIntAuto(match[1])\n    if value > 0xffffffff || value < 0\n      throw new Error \"ipaddr: address outside defined range\"\n    return ((value >> shift) & 0xff for shift in [0..24] by 8).reverse()\n  else\n    return null\n\n# An IPv6 address (RFC2460)\nclass ipaddr.IPv6\n  # Constructs an IPv6 address from an array of eight 16-bit parts\n  # or sixteen 8-bit parts in network order (MSB first).\n  # Throws an error if the input is invalid.\n  constructor: (parts, zoneId) ->\n    if parts.length == 16\n      @parts = []\n      for i in [0..14] by 2\n        @parts.push((parts[i] << 8) | parts[i + 1])\n    else if parts.length == 8\n      @parts = parts\n    else\n      throw new Error \"ipaddr: ipv6 part count should be 8 or 16\"\n\n    for part in @parts\n      if !(0 <= part <= 0xffff)\n        throw new Error \"ipaddr: ipv6 part should fit in 16 bits\"\n\n    if zoneId\n      @zoneId = zoneId\n\n  # The 'kind' method exists on both IPv4 and IPv6 classes.\n  kind: ->\n    return 'ipv6'\n\n  # Returns the address in compact, human-readable format like\n  # 2001:db8:8:66::1\n  toString: ->\n    stringParts = (part.toString(16) for part in @parts)\n\n    compactStringParts = []\n    pushPart = (part) -> compactStringParts.push part\n\n    state = 0\n    for part in stringParts\n      switch state\n        when 0\n          if part == '0'\n            pushPart('')\n          else\n            pushPart(part)\n\n          state = 1\n        when 1\n          if part == '0'\n            state = 2\n          else\n            pushPart(part)\n        when 2\n          unless part == '0'\n            pushPart('')\n            pushPart(part)\n            state = 3\n        when 3\n          pushPart(part)\n\n    if state == 2\n      pushPart('')\n      pushPart('')\n\n    addr = compactStringParts.join \":\"\n\n    suffix = ''\n    if @zoneId\n      suffix = '%' + @zoneId\n\n    return addr + suffix\n\n  # Returns an array of byte-sized values in network order (MSB first)\n  toByteArray: ->\n    bytes = []\n    for part in @parts\n      bytes.push(part >> 8)\n      bytes.push(part & 0xff)\n\n    return bytes\n\n  # Returns the address in expanded format with all zeroes included, like\n  # 2001:db8:8:66:0:0:0:1\n  toNormalizedString: ->\n    addr = (part.toString(16) for part in @parts).join \":\"\n\n    suffix = ''\n    if @zoneId\n      suffix = '%' + @zoneId\n\n    return addr + suffix\n\n  # Checks if this address matches other one within given CIDR range.\n  match: (other, cidrRange) ->\n    if cidrRange == undefined\n      [other, cidrRange] = other\n\n    if other.kind() != 'ipv6'\n      throw new Error \"ipaddr: cannot match ipv6 address with non-ipv6 one\"\n\n    return matchCIDR(this.parts, other.parts, 16, cidrRange)\n\n  # Special IPv6 ranges\n  SpecialRanges:\n    unspecified: [ new IPv6([0,      0,      0, 0, 0,      0,      0, 0]), 128 ] # RFC4291, here and after\n    linkLocal:   [ new IPv6([0xfe80, 0,      0, 0, 0,      0,      0, 0]), 10  ]\n    multicast:   [ new IPv6([0xff00, 0,      0, 0, 0,      0,      0, 0]), 8   ]\n    loopback:    [ new IPv6([0,      0,      0, 0, 0,      0,      0, 1]), 128 ]\n    uniqueLocal: [ new IPv6([0xfc00, 0,      0, 0, 0,      0,      0, 0]), 7   ]\n    ipv4Mapped:  [ new IPv6([0,      0,      0, 0, 0,      0xffff, 0, 0]), 96  ]\n    rfc6145:     [ new IPv6([0,      0,      0, 0, 0xffff, 0,      0, 0]), 96  ] # RFC6145\n    rfc6052:     [ new IPv6([0x64,   0xff9b, 0, 0, 0,      0,      0, 0]), 96  ] # RFC6052\n    '6to4':      [ new IPv6([0x2002, 0,      0, 0, 0,      0,      0, 0]), 16  ] # RFC3056\n    teredo:      [ new IPv6([0x2001, 0,      0, 0, 0,      0,      0, 0]), 32  ] # RFC6052, RFC6146\n    reserved: [\n      [ new IPv6([ 0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32 ] # RFC4291\n    ]\n\n  # Checks if the address corresponds to one of the special ranges.\n  range: ->\n    return ipaddr.subnetMatch(this, @SpecialRanges)\n\n  # Checks if this address is an IPv4-mapped IPv6 address.\n  isIPv4MappedAddress: ->\n    return @range() == 'ipv4Mapped'\n\n  # Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.\n  # Throws an error otherwise.\n  toIPv4Address: ->\n    unless @isIPv4MappedAddress()\n      throw new Error \"ipaddr: trying to convert a generic ipv6 address to ipv4\"\n\n    [high, low] = @parts[-2..-1]\n\n    return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff])\n\n  # returns a number of leading ones in IPv6 address, making sure that\n  # the rest is a solid sequence of 0's (valid netmask)\n  # returns either the CIDR length or null if mask is not valid\n  prefixLengthFromSubnetMask: ->\n    # number of zeroes in octet\n    zerotable =\n      0    : 16\n      32768: 15\n      49152: 14\n      57344: 13\n      61440: 12\n      63488: 11\n      64512: 10\n      65024: 9\n      65280: 8\n      65408: 7\n      65472: 6\n      65504: 5\n      65520: 4\n      65528: 3\n      65532: 2\n      65534: 1\n      65535: 0\n\n    cidr = 0\n    # non-zero encountered stop scanning for zeroes\n    stop = false\n    for i in [7..0] by -1\n      part = @parts[i]\n      if part of zerotable\n        zeros = zerotable[part]\n        if stop and zeros != 0\n          return null\n        unless zeros == 16\n          stop = true\n        cidr += zeros\n      else\n        return null\n    return 128 - cidr\n\n# IPv6-matching regular expressions.\n# For IPv6, the task is simpler: it is enough to match the colon-delimited\n# hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at\n# the end.\nipv6Part = \"(?:[0-9a-f]+::?)+\"\nzoneIndex = \"%[0-9a-z]{1,}\"\nipv6Regexes =\n  zoneIndex:    new RegExp zoneIndex, 'i'\n  native:       new RegExp \"^(::)?(#{ipv6Part})?([0-9a-f]+)?(::)?(#{zoneIndex})?$\", 'i'\n  transitional: new RegExp \"^((?:#{ipv6Part})|(?:::)(?:#{ipv6Part})?)\" +\n                           \"#{ipv4Part}\\\\.#{ipv4Part}\\\\.#{ipv4Part}\\\\.#{ipv4Part}\" +\n                           \"(#{zoneIndex})?$\", 'i'\n\n# Expand :: in an IPv6 address or address part consisting of `parts` groups.\nexpandIPv6 = (string, parts) ->\n  # More than one '::' means invalid adddress\n  if string.indexOf('::') != string.lastIndexOf('::')\n    return null\n\n  # Remove zone index and save it for later\n  zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0]\n  if zoneId\n    zoneId = zoneId.substring(1)\n    string = string.replace(/%.+$/, '')\n\n  # How many parts do we already have?\n  colonCount = 0\n  lastColon = -1\n  while (lastColon = string.indexOf(':', lastColon + 1)) >= 0\n    colonCount++\n\n  # 0::0 is two parts more than ::\n  colonCount-- if string.substr(0, 2) == '::'\n  colonCount-- if string.substr(-2, 2) == '::'\n\n  # The following loop would hang if colonCount > parts\n  if colonCount > parts\n    return null\n\n  # replacement = ':' + '0:' * (parts - colonCount)\n  replacementCount = parts - colonCount\n  replacement = ':'\n  while replacementCount--\n    replacement += '0:'\n\n  # Insert the missing zeroes\n  string = string.replace('::', replacement)\n\n  # Trim any garbage which may be hanging around if :: was at the edge in\n  # the source string\n  string = string[1..-1] if string[0] == ':'\n  string = string[0..-2] if string[string.length-1] == ':'\n\n  parts = (parseInt(part, 16) for part in string.split(\":\"))\n  return { parts: parts, zoneId: zoneId }\n\n# Parse an IPv6 address.\nipaddr.IPv6.parser = (string) ->\n  if ipv6Regexes['native'].test(string)\n    return expandIPv6(string, 8)\n\n  else if match = string.match(ipv6Regexes['transitional'])\n    zoneId = match[6] || ''\n    addr = expandIPv6(match[1][0..-2] + zoneId, 6)\n    if addr.parts\n      octets = [parseInt(match[2]), parseInt(match[3]),\n                parseInt(match[4]), parseInt(match[5])]\n      for octet in octets\n        if !(0 <= octet <= 255)\n          return null\n\n      addr.parts.push(octets[0] << 8 | octets[1])\n      addr.parts.push(octets[2] << 8 | octets[3])\n      return { parts: addr.parts, zoneId: addr.zoneId }\n\n  return null\n\n# Checks if a given string is formatted like IPv4/IPv6 address.\nipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = (string) ->\n  return @parser(string) != null\n\n# Checks if a given string is a valid IPv4/IPv6 address.\nipaddr.IPv4.isValid = (string) ->\n  try\n    new this(@parser(string))\n    return true\n  catch e\n    return false\n\nipaddr.IPv4.isValidFourPartDecimal = (string) ->\n  if ipaddr.IPv4.isValid(string) and string.match(/^\\d+(\\.\\d+){3}$/)\n    return true\n  else\n    return false\n\nipaddr.IPv6.isValid = (string) ->\n  # Since IPv6.isValid is always called first, this shortcut\n  # provides a substantial performance gain.\n  if typeof string == \"string\" and string.indexOf(\":\") == -1\n    return false\n\n  try\n    addr = @parser(string)\n    new this(addr.parts, addr.zoneId)\n    return true\n  catch e\n    return false\n\n# Tries to parse and validate a string with IPv4/IPv6 address.\n# Throws an error if it fails.\nipaddr.IPv4.parse = (string) ->\n  parts = @parser(string)\n  if parts == null\n    throw new Error \"ipaddr: string is not formatted like ip address\"\n\n  return new this(parts)\n\nipaddr.IPv6.parse = (string) ->\n  addr = @parser(string)\n  if addr.parts == null\n    throw new Error \"ipaddr: string is not formatted like ip address\"\n\n  return new this(addr.parts, addr.zoneId)\n\nipaddr.IPv4.parseCIDR = (string) ->\n  if match = string.match(/^(.+)\\/(\\d+)$/)\n    maskLength = parseInt(match[2])\n    if maskLength >= 0 and maskLength <= 32\n      return [@parse(match[1]), maskLength]\n\n  throw new Error \"ipaddr: string is not formatted like an IPv4 CIDR range\"\n\n# A utility function to return subnet mask in IPv4 format given the prefix length\nipaddr.IPv4.subnetMaskFromPrefixLength = (prefix) ->\n  prefix = parseInt(prefix)\n  if prefix < 0 or prefix > 32\n    throw new Error('ipaddr: invalid IPv4 prefix length')\n  octets = [0, 0, 0, 0]\n  j = 0\n  filledOctetCount = Math.floor(prefix / 8)\n  while j < filledOctetCount\n    octets[j] = 255\n    j++\n  if filledOctetCount < 4\n    octets[filledOctetCount] = Math.pow(2, (prefix % 8)) - 1 << 8 - (prefix % 8)\n  new @(octets)\n\n# A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation\nipaddr.IPv4.broadcastAddressFromCIDR = (string) ->\n  try\n    cidr = @parseCIDR(string)\n    ipInterfaceOctets = cidr[0].toByteArray()\n    subnetMaskOctets = @subnetMaskFromPrefixLength(cidr[1]).toByteArray()\n    octets = []\n    i = 0\n    while i < 4\n      # Broadcast address is bitwise OR between ip interface and inverted mask\n      octets.push parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255\n      i++\n    return new @(octets)\n  catch error\n    throw new Error('ipaddr: the address does not have IPv4 CIDR format')\n  return\n\n# A utility function to return network address given the IPv4 interface and prefix length in CIDR notation\nipaddr.IPv4.networkAddressFromCIDR = (string) ->\n  try\n    cidr = @parseCIDR(string)\n    ipInterfaceOctets = cidr[0].toByteArray()\n    subnetMaskOctets = @subnetMaskFromPrefixLength(cidr[1]).toByteArray()\n    octets = []\n    i = 0\n    while i < 4\n      # Network address is bitwise AND between ip interface and mask\n      octets.push parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10)\n      i++\n    return new @(octets)\n  catch error\n    throw new Error('ipaddr: the address does not have IPv4 CIDR format')\n  return\n\nipaddr.IPv6.parseCIDR = (string) ->\n  if match = string.match(/^(.+)\\/(\\d+)$/)\n    maskLength = parseInt(match[2])\n    if maskLength >= 0 and maskLength <= 128\n      return [@parse(match[1]), maskLength]\n\n  throw new Error \"ipaddr: string is not formatted like an IPv6 CIDR range\"\n\n# Checks if the address is valid IP address\nipaddr.isValid = (string) ->\n  return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string)\n\n# Try to parse an address and throw an error if it is impossible\nipaddr.parse = (string) ->\n  if ipaddr.IPv6.isValid(string)\n    return ipaddr.IPv6.parse(string)\n  else if ipaddr.IPv4.isValid(string)\n    return ipaddr.IPv4.parse(string)\n  else\n    throw new Error \"ipaddr: the address has neither IPv6 nor IPv4 format\"\n\nipaddr.parseCIDR = (string) ->\n  try\n    return ipaddr.IPv6.parseCIDR(string)\n  catch e\n    try\n      return ipaddr.IPv4.parseCIDR(string)\n    catch e\n      throw new Error \"ipaddr: the address has neither IPv6 nor IPv4 CIDR format\"\n\n# Try to parse an array in network order (MSB first) for IPv4 and IPv6\nipaddr.fromByteArray = (bytes) ->\n  length = bytes.length\n  if length == 4\n    return new ipaddr.IPv4(bytes)\n  else if length == 16\n    return new ipaddr.IPv6(bytes)\n  else\n    throw new Error \"ipaddr: the binary input is neither an IPv6 nor IPv4 address\"\n\n# Parse an address and return plain IPv4 address if it is an IPv4-mapped address\nipaddr.process = (string) ->\n  addr = @parse(string)\n  if addr.kind() == 'ipv6' && addr.isIPv4MappedAddress()\n    return addr.toIPv4Address()\n  else\n    return addr\n"
  ]
}