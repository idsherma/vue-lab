{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/ipaddr.js/test/ipaddr.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "ipaddr = require '../lib/ipaddr'\n\nmodule.exports =\n  'should define main classes': (test) ->\n    test.ok(ipaddr.IPv4?, 'defines IPv4 class')\n    test.ok(ipaddr.IPv6?, 'defines IPv6 class')\n    test.done()\n\n  'can construct IPv4 from octets': (test) ->\n    test.doesNotThrow ->\n      new ipaddr.IPv4([192, 168, 1, 2])\n    test.done()\n\n  'refuses to construct invalid IPv4': (test) ->\n    test.throws ->\n      new ipaddr.IPv4([300, 1, 2, 3])\n    test.throws ->\n      new ipaddr.IPv4([8, 8, 8])\n    test.done()\n\n  'converts IPv4 to string correctly': (test) ->\n    addr = new ipaddr.IPv4([192, 168, 1, 1])\n    test.equal(addr.toString(), '192.168.1.1')\n    test.equal(addr.toNormalizedString(), '192.168.1.1')\n    test.done()\n\n  'returns correct kind for IPv4': (test) ->\n    addr = new ipaddr.IPv4([1, 2, 3, 4])\n    test.equal(addr.kind(), 'ipv4')\n    test.done()\n\n  'allows to access IPv4 octets': (test) ->\n    addr = new ipaddr.IPv4([42, 0, 0, 0])\n    test.equal(addr.octets[0], 42)\n    test.done()\n\n  'checks IPv4 address format': (test) ->\n    test.equal(ipaddr.IPv4.isIPv4('192.168.007.0xa'), true)\n    test.equal(ipaddr.IPv4.isIPv4('1024.0.0.1'),      true)\n    test.equal(ipaddr.IPv4.isIPv4('8.0xa.wtf.6'),     false)\n    test.done()\n\n  'validates IPv4 addresses': (test) ->\n    test.equal(ipaddr.IPv4.isValid('192.168.007.0xa'), true)\n    test.equal(ipaddr.IPv4.isValid('1024.0.0.1'),      false)\n    test.equal(ipaddr.IPv4.isValid('8.0xa.wtf.6'),     false)\n    test.done()\n\n  'parses IPv4 in several weird formats': (test) ->\n    test.deepEqual(ipaddr.IPv4.parse('192.168.1.1').octets,  [192, 168, 1, 1])\n    test.deepEqual(ipaddr.IPv4.parse('0xc0.168.1.1').octets, [192, 168, 1, 1])\n    test.deepEqual(ipaddr.IPv4.parse('192.0250.1.1').octets, [192, 168, 1, 1])\n    test.deepEqual(ipaddr.IPv4.parse('0xc0a80101').octets,   [192, 168, 1, 1])\n    test.deepEqual(ipaddr.IPv4.parse('030052000401').octets, [192, 168, 1, 1])\n    test.deepEqual(ipaddr.IPv4.parse('3232235777').octets,   [192, 168, 1, 1])\n    test.done()\n\n  'barfs at invalid IPv4': (test) ->\n    test.throws ->\n      ipaddr.IPv4.parse('10.0.0.wtf')\n    test.done()\n\n  'matches IPv4 CIDR correctly': (test) ->\n    addr = new ipaddr.IPv4([10, 5, 0, 1])\n    test.equal(addr.match(ipaddr.IPv4.parse('0.0.0.0'), 0),   true)\n    test.equal(addr.match(ipaddr.IPv4.parse('11.0.0.0'), 8),  false)\n    test.equal(addr.match(ipaddr.IPv4.parse('10.0.0.0'), 8),  true)\n    test.equal(addr.match(ipaddr.IPv4.parse('10.0.0.1'), 8),  true)\n    test.equal(addr.match(ipaddr.IPv4.parse('10.0.0.10'), 8), true)\n    test.equal(addr.match(ipaddr.IPv4.parse('10.5.5.0'), 16), true)\n    test.equal(addr.match(ipaddr.IPv4.parse('10.4.5.0'), 16), false)\n    test.equal(addr.match(ipaddr.IPv4.parse('10.4.5.0'), 15), true)\n    test.equal(addr.match(ipaddr.IPv4.parse('10.5.0.2'), 32), false)\n    test.equal(addr.match(addr, 32), true)\n    test.done()\n\n  'parses IPv4 CIDR correctly': (test) ->\n    addr = new ipaddr.IPv4([10, 5, 0, 1])\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('0.0.0.0/0')),   true)\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('11.0.0.0/8')),  false)\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.0.0.0/8')),  true)\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.0.0.1/8')),  true)\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.0.0.10/8')), true)\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.5.5.0/16')), true)\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.4.5.0/16')), false)\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.4.5.0/15')), true)\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.5.0.2/32')), false)\n    test.equal(addr.match(ipaddr.IPv4.parseCIDR('10.5.0.1/32')), true)\n    test.throws ->\n      ipaddr.IPv4.parseCIDR('10.5.0.1')\n    test.throws ->\n      ipaddr.IPv4.parseCIDR('0.0.0.0/-1')\n    test.throws ->\n      ipaddr.IPv4.parseCIDR('0.0.0.0/33')\n    test.done()\n\n  'detects reserved IPv4 networks': (test) ->\n    test.equal(ipaddr.IPv4.parse('0.0.0.0').range(),         'unspecified')\n    test.equal(ipaddr.IPv4.parse('0.1.0.0').range(),         'unspecified')\n    test.equal(ipaddr.IPv4.parse('10.1.0.1').range(),        'private')\n    test.equal(ipaddr.IPv4.parse('100.64.0.0').range(),      'carrierGradeNat')\n    test.equal(ipaddr.IPv4.parse('100.127.255.255').range(), 'carrierGradeNat')\n    test.equal(ipaddr.IPv4.parse('192.168.2.1').range(),     'private')\n    test.equal(ipaddr.IPv4.parse('224.100.0.1').range(),     'multicast')\n    test.equal(ipaddr.IPv4.parse('169.254.15.0').range(),    'linkLocal')\n    test.equal(ipaddr.IPv4.parse('127.1.1.1').range(),       'loopback')\n    test.equal(ipaddr.IPv4.parse('255.255.255.255').range(), 'broadcast')\n    test.equal(ipaddr.IPv4.parse('240.1.2.3').range(),       'reserved')\n    test.equal(ipaddr.IPv4.parse('8.8.8.8').range(),         'unicast')\n    test.done()\n\n  'checks the conventional IPv4 address format': (test) ->\n      test.equal(ipaddr.IPv4.isValidFourPartDecimal('192.168.1.1'),  true)\n      test.equal(ipaddr.IPv4.isValidFourPartDecimal('0xc0.168.1.1'), false)\n      test.done()\n\n  'can construct IPv6 from 16bit parts': (test) ->\n    test.doesNotThrow ->\n      new ipaddr.IPv6([0x2001, 0xdb8, 0xf53a, 0, 0, 0, 0, 1])\n    test.done()\n\n  'can construct IPv6 from 8bit parts': (test) ->\n    test.doesNotThrow ->\n      new ipaddr.IPv6([0x20, 0x01, 0xd, 0xb8, 0xf5, 0x3a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n    test.deepEqual(new ipaddr.IPv6([0x20, 0x01, 0xd, 0xb8, 0xf5, 0x3a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),\n      new ipaddr.IPv6([0x2001, 0xdb8, 0xf53a, 0, 0, 0, 0, 1]))\n    test.done()\n\n  'refuses to construct invalid IPv6': (test) ->\n    test.throws ->\n      new ipaddr.IPv6([0xfffff, 0, 0, 0, 0, 0, 0, 1])\n    test.throws ->\n      new ipaddr.IPv6([0xfffff, 0, 0, 0, 0, 0, 1])\n    test.throws ->\n      new ipaddr.IPv6([0xffff, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n    test.done()\n\n  'converts IPv6 to string correctly': (test) ->\n    addr = new ipaddr.IPv6([0x2001, 0xdb8, 0xf53a, 0, 0, 0, 0, 1])\n    test.equal(addr.toNormalizedString(), '2001:db8:f53a:0:0:0:0:1')\n    test.equal(addr.toString(), '2001:db8:f53a::1')\n    test.equal(new ipaddr.IPv6([0, 0, 0, 0, 0, 0, 0, 1]).toString(), '::1')\n    test.equal(new ipaddr.IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]).toString(), '2001:db8::')\n    test.done()\n\n  'returns IPv6 zoneIndex': (test) ->\n    addr = new ipaddr.IPv6([0x2001, 0xdb8, 0xf53a, 0, 0, 0, 0, 1], 'utun0')\n    test.equal(addr.toNormalizedString(), '2001:db8:f53a:0:0:0:0:1%utun0')\n    test.equal(addr.toString(), '2001:db8:f53a::1%utun0')\n\n    test.equal(\n      ipaddr.parse('2001:db8:f53a::1%2').toString(),\n      '2001:db8:f53a::1%2'\n    )\n    test.equal(\n      ipaddr.parse('2001:db8:f53a::1%WAT').toString(),\n      '2001:db8:f53a::1%WAT'\n    )\n    test.equal(\n      ipaddr.parse('2001:db8:f53a::1%sUp').toString(),\n      '2001:db8:f53a::1%sUp'\n    )\n\n    test.done()\n\n  'returns IPv6 zoneIndex for IPv4-mapped IPv6 addresses': (test) ->\n    addr = ipaddr.parse('::ffff:192.168.1.1%eth0')\n    test.equal(addr.toNormalizedString(), '0:0:0:0:0:ffff:c0a8:101%eth0')\n    test.equal(addr.toString(), '::ffff:c0a8:101%eth0')\n\n    test.equal(\n      ipaddr.parse('::ffff:192.168.1.1%2').toString(),\n      '::ffff:c0a8:101%2'\n    )\n    test.equal(\n      ipaddr.parse('::ffff:192.168.1.1%WAT').toString(),\n      '::ffff:c0a8:101%WAT'\n    )\n    test.equal(\n      ipaddr.parse('::ffff:192.168.1.1%sUp').toString(),\n      '::ffff:c0a8:101%sUp'\n    )\n\n    test.done()\n\n  'returns correct kind for IPv6': (test) ->\n    addr = new ipaddr.IPv6([0x2001, 0xdb8, 0xf53a, 0, 0, 0, 0, 1])\n    test.equal(addr.kind(), 'ipv6')\n    test.done()\n\n  'allows to access IPv6 address parts': (test) ->\n    addr = new ipaddr.IPv6([0x2001, 0xdb8, 0xf53a, 0, 0, 42, 0, 1])\n    test.equal(addr.parts[5], 42)\n    test.done()\n\n  'checks IPv6 address format': (test) ->\n    test.equal(ipaddr.IPv6.isIPv6('2001:db8:F53A::1'),     true)\n    test.equal(ipaddr.IPv6.isIPv6('200001::1'),            true)\n    test.equal(ipaddr.IPv6.isIPv6('::ffff:192.168.1.1'),   true)\n    test.equal(ipaddr.IPv6.isIPv6('::ffff:192.168.1.1%z'), true)\n    test.equal(ipaddr.IPv6.isIPv6('::ffff:300.168.1.1'),   false)\n    test.equal(ipaddr.IPv6.isIPv6('::ffff:300.168.1.1:0'), false)\n    test.equal(ipaddr.IPv6.isIPv6('fe80::wtf'),            false)\n    test.equal(ipaddr.IPv6.isIPv6('fe80::%'),              false)\n    test.done()\n\n  'validates IPv6 addresses': (test) ->\n    test.equal(ipaddr.IPv6.isValid('2001:db8:F53A::1'),     true)\n    test.equal(ipaddr.IPv6.isValid('200001::1'),            false)\n    test.equal(ipaddr.IPv6.isValid('::ffff:192.168.1.1'),   true)\n    test.equal(ipaddr.IPv6.isValid('::ffff:192.168.1.1%z'), true)\n    test.equal(ipaddr.IPv6.isValid('::ffff:300.168.1.1'),   false)\n    test.equal(ipaddr.IPv6.isValid('::ffff:300.168.1.1:0'), false)\n    test.equal(ipaddr.IPv6.isValid('::ffff:222.1.41.9000'), false)\n    test.equal(ipaddr.IPv6.isValid('2001:db8::F53A::1'),    false)\n    test.equal(ipaddr.IPv6.isValid('fe80::wtf'),            false)\n    test.equal(ipaddr.IPv6.isValid('fe80::%'),              false)\n    test.equal(ipaddr.IPv6.isValid('2002::2:'),             false)\n    test.equal(ipaddr.IPv6.isValid('::%z'),                 true)\n\n    test.equal(ipaddr.IPv6.isValid(undefined),              false)\n    test.done()\n\n  'parses IPv6 in different formats': (test) ->\n    test.deepEqual(ipaddr.IPv6.parse('2001:db8:F53A:0:0:0:0:1').parts, [0x2001, 0xdb8, 0xf53a, 0, 0, 0, 0, 1])\n    test.deepEqual(ipaddr.IPv6.parse('fe80::10').parts, [0xfe80, 0, 0, 0, 0, 0, 0, 0x10])\n    test.deepEqual(ipaddr.IPv6.parse('2001:db8:F53A::').parts, [0x2001, 0xdb8, 0xf53a, 0, 0, 0, 0, 0])\n    test.deepEqual(ipaddr.IPv6.parse('::1').parts, [0, 0, 0, 0, 0, 0, 0, 1])\n    test.deepEqual(ipaddr.IPv6.parse('::').parts, [0, 0, 0, 0, 0, 0, 0, 0])\n    test.deepEqual(ipaddr.IPv6.parse('::%z').parts, [0, 0, 0, 0, 0, 0, 0, 0])\n    test.deepEqual(ipaddr.IPv6.parse('::%z').zoneId, 'z')\n    test.done()\n\n  'barfs at invalid IPv6': (test) ->\n    test.throws ->\n      ipaddr.IPv6.parse('fe80::0::1')\n    test.done()\n\n  'matches IPv6 CIDR correctly': (test) ->\n    addr = ipaddr.IPv6.parse('2001:db8:f53a::1')\n    test.equal(addr.match(ipaddr.IPv6.parse('::'), 0),                  true)\n    test.equal(addr.match(ipaddr.IPv6.parse('2001:db8:f53a::1:1'), 64), true)\n    test.equal(addr.match(ipaddr.IPv6.parse('2001:db8:f53b::1:1'), 48), false)\n    test.equal(addr.match(ipaddr.IPv6.parse('2001:db8:f531::1:1'), 44), true)\n    test.equal(addr.match(ipaddr.IPv6.parse('2001:db8:f500::1'), 40),   true)\n    test.equal(addr.match(ipaddr.IPv6.parse('2001:db8:f500::1%z'), 40), true)\n    test.equal(addr.match(ipaddr.IPv6.parse('2001:db9:f500::1'), 40),   false)\n    test.equal(addr.match(ipaddr.IPv6.parse('2001:db9:f500::1'), 40),   false)\n    test.equal(addr.match(ipaddr.IPv6.parse('2001:db9:f500::1%z'), 40), false)\n    test.equal(addr.match(addr, 128), true)\n    test.done()\n\n  'parses IPv6 CIDR correctly': (test) ->\n    addr = ipaddr.IPv6.parse('2001:db8:f53a::1')\n    test.equal(addr.match(ipaddr.IPv6.parseCIDR('::/0')),                  true)\n    test.equal(addr.match(ipaddr.IPv6.parseCIDR('2001:db8:f53a::1:1/64')), true)\n    test.equal(addr.match(ipaddr.IPv6.parseCIDR('2001:db8:f53b::1:1/48')), false)\n    test.equal(addr.match(ipaddr.IPv6.parseCIDR('2001:db8:f531::1:1/44')), true)\n    test.equal(addr.match(ipaddr.IPv6.parseCIDR('2001:db8:f500::1/40')),   true)\n    test.equal(addr.match(ipaddr.IPv6.parseCIDR('2001:db8:f500::1%z/40')), true)\n    test.equal(addr.match(ipaddr.IPv6.parseCIDR('2001:db9:f500::1/40')),   false)\n    test.equal(addr.match(ipaddr.IPv6.parseCIDR('2001:db9:f500::1%z/40')), false)\n    test.equal(addr.match(ipaddr.IPv6.parseCIDR('2001:db8:f53a::1/128')),  true)\n    test.throws ->\n      ipaddr.IPv6.parseCIDR('2001:db8:f53a::1')\n    test.throws ->\n      ipaddr.IPv6.parseCIDR('2001:db8:f53a::1/-1')\n    test.throws ->\n      ipaddr.IPv6.parseCIDR('2001:db8:f53a::1/129')\n    test.done()\n\n  'converts between IPv4-mapped IPv6 addresses and IPv4 addresses': (test) ->\n    addr = ipaddr.IPv4.parse('77.88.21.11')\n    mapped = addr.toIPv4MappedAddress()\n    test.deepEqual(mapped.parts, [0, 0, 0, 0, 0, 0xffff, 0x4d58, 0x150b])\n    test.deepEqual(mapped.toIPv4Address().octets, addr.octets)\n    test.done()\n\n  'refuses to convert non-IPv4-mapped IPv6 address to IPv4 address': (test) ->\n    test.throws ->\n      ipaddr.IPv6.parse('2001:db8::1').toIPv4Address()\n    test.done()\n\n  'detects reserved IPv6 networks': (test) ->\n    test.equal(ipaddr.IPv6.parse('::').range(),                        'unspecified')\n    test.equal(ipaddr.IPv6.parse('fe80::1234:5678:abcd:0123').range(), 'linkLocal')\n    test.equal(ipaddr.IPv6.parse('ff00::1234').range(),                'multicast')\n    test.equal(ipaddr.IPv6.parse('::1').range(),                       'loopback')\n    test.equal(ipaddr.IPv6.parse('fc00::').range(),                    'uniqueLocal')\n    test.equal(ipaddr.IPv6.parse('::ffff:192.168.1.10').range(),       'ipv4Mapped')\n    test.equal(ipaddr.IPv6.parse('::ffff:0:192.168.1.10').range(),     'rfc6145')\n    test.equal(ipaddr.IPv6.parse('64:ff9b::1234').range(),             'rfc6052')\n    test.equal(ipaddr.IPv6.parse('2002:1f63:45e8::1').range(),         '6to4')\n    test.equal(ipaddr.IPv6.parse('2001::4242').range(),                'teredo')\n    test.equal(ipaddr.IPv6.parse('2001:db8::3210').range(),            'reserved')\n    test.equal(ipaddr.IPv6.parse('2001:470:8:66::1').range(),          'unicast')\n    test.equal(ipaddr.IPv6.parse('2001:470:8:66::1%z').range(),        'unicast')\n    test.done()\n\n  'is able to determine IP address type': (test) ->\n    test.equal(ipaddr.parse('8.8.8.8').kind(), 'ipv4')\n    test.equal(ipaddr.parse('2001:db8:3312::1').kind(), 'ipv6')\n    test.equal(ipaddr.parse('2001:db8:3312::1%z').kind(), 'ipv6')\n    test.done()\n\n  'throws an error if tried to parse an invalid address': (test) ->\n    test.throws ->\n      ipaddr.parse('::some.nonsense')\n    test.done()\n\n  'correctly processes IPv4-mapped addresses': (test) ->\n    test.equal(ipaddr.process('8.8.8.8').kind(), 'ipv4')\n    test.equal(ipaddr.process('2001:db8:3312::1').kind(), 'ipv6')\n    test.equal(ipaddr.process('::ffff:192.168.1.1').kind(), 'ipv4')\n    test.equal(ipaddr.process('::ffff:192.168.1.1%z').kind(), 'ipv4')\n    test.done()\n\n  'correctly converts IPv6 and IPv4 addresses to byte arrays': (test) ->\n    test.deepEqual(ipaddr.parse('1.2.3.4').toByteArray(),\n          [0x1, 0x2, 0x3, 0x4]);\n    # Fuck yeah. The first byte of Google's IPv6 address is 42. 42!\n    test.deepEqual(ipaddr.parse('2a00:1450:8007::68').toByteArray(),\n          [42, 0x00, 0x14, 0x50, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68 ])\n    test.deepEqual(ipaddr.parse('2a00:1450:8007::68%z').toByteArray(),\n          [42, 0x00, 0x14, 0x50, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68 ])\n\n    test.done()\n\n  'correctly parses 1 as an IPv4 address': (test) ->\n    test.equal(ipaddr.IPv6.isValid('1'), false)\n    test.equal(ipaddr.IPv4.isValid('1'), true)\n    test.deepEqual(new ipaddr.IPv4([0, 0, 0, 1]), ipaddr.parse('1'))\n    test.done()\n\n  'correctly detects IPv4 and IPv6 CIDR addresses': (test) ->\n    test.deepEqual([ipaddr.IPv6.parse('fc00::'), 64],\n                   ipaddr.parseCIDR('fc00::/64'))\n    test.deepEqual([ipaddr.IPv4.parse('1.2.3.4'), 5],\n                   ipaddr.parseCIDR('1.2.3.4/5'))\n    test.done()\n\n  'does not consider a very large or very small number a valid IP address': (test) ->\n    test.equal(ipaddr.isValid('4999999999'), false)\n    test.equal(ipaddr.isValid('-1'), false)\n    test.done()\n\n  'does not hang on ::8:8:8:8:8:8:8:8:8': (test) ->\n    test.equal(ipaddr.IPv6.isValid('::8:8:8:8:8:8:8:8:8'), false)\n    test.equal(ipaddr.IPv6.isValid('::8:8:8:8:8:8:8:8:8%z'), false)\n    test.done()\n\n  'subnetMatch does not fail on empty range': (test) ->\n    ipaddr.subnetMatch(new ipaddr.IPv4([1,2,3,4]), {}, false)\n    ipaddr.subnetMatch(new ipaddr.IPv4([1,2,3,4]), {subnet: []}, false)\n    test.done()\n\n  'subnetMatch returns default subnet on empty range': (test) ->\n    test.equal(ipaddr.subnetMatch(new ipaddr.IPv4([1,2,3,4]), {}, false), false)\n    test.equal(ipaddr.subnetMatch(new ipaddr.IPv4([1,2,3,4]), {subnet: []}, false), false)\n    test.done()\n\n  'subnetMatch does not fail on IPv4 when looking for IPv6': (test) ->\n    rangelist = {subnet6: ipaddr.parseCIDR('fe80::/64')}\n    test.equal(ipaddr.subnetMatch(new ipaddr.IPv4([1,2,3,4]), rangelist, false), false)\n    test.done()\n\n  'subnetMatch does not fail on IPv6 when looking for IPv4': (test) ->\n    rangelist = {subnet4: ipaddr.parseCIDR('1.2.3.0/24')}\n    test.equal(ipaddr.subnetMatch(new ipaddr.IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 1]), rangelist, false), false)\n    test.done()\n\n  'subnetMatch can use a hybrid IPv4/IPv6 range list': (test) ->\n    rangelist = {dual64: [ipaddr.parseCIDR('1.2.4.0/24'), ipaddr.parseCIDR('2001:1:2:3::/64')]}\n    test.equal(ipaddr.subnetMatch(new ipaddr.IPv4([1,2,4,1]), rangelist, false), 'dual64')\n    test.equal(ipaddr.subnetMatch(new ipaddr.IPv6([0x2001, 1, 2, 3, 0, 0, 0, 1]), rangelist, false), 'dual64')\n    test.done()\n\n  'is able to determine IP address type from byte array input': (test) ->\n    test.equal(ipaddr.fromByteArray([0x7f, 0, 0, 1]).kind(), 'ipv4')\n    test.equal(ipaddr.fromByteArray([0x20, 0x01, 0xd, 0xb8, 0xf5, 0x3a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]).kind(), 'ipv6')\n    test.throws ->\n      ipaddr.fromByteArray([1])\n    test.done()\n\n  'prefixLengthFromSubnetMask returns proper CIDR notation for standard IPv4 masks': (test) ->\n    test.equal(ipaddr.IPv4.parse('255.255.255.255').prefixLengthFromSubnetMask(), 32)\n    test.equal(ipaddr.IPv4.parse('255.255.255.254').prefixLengthFromSubnetMask(), 31)\n    test.equal(ipaddr.IPv4.parse('255.255.255.252').prefixLengthFromSubnetMask(), 30)\n    test.equal(ipaddr.IPv4.parse('255.255.255.248').prefixLengthFromSubnetMask(), 29)\n    test.equal(ipaddr.IPv4.parse('255.255.255.240').prefixLengthFromSubnetMask(), 28)\n    test.equal(ipaddr.IPv4.parse('255.255.255.224').prefixLengthFromSubnetMask(), 27)\n    test.equal(ipaddr.IPv4.parse('255.255.255.192').prefixLengthFromSubnetMask(), 26)\n    test.equal(ipaddr.IPv4.parse('255.255.255.128').prefixLengthFromSubnetMask(), 25)\n    test.equal(ipaddr.IPv4.parse('255.255.255.0').prefixLengthFromSubnetMask(), 24)\n    test.equal(ipaddr.IPv4.parse('255.255.254.0').prefixLengthFromSubnetMask(), 23)\n    test.equal(ipaddr.IPv4.parse('255.255.252.0').prefixLengthFromSubnetMask(), 22)\n    test.equal(ipaddr.IPv4.parse('255.255.248.0').prefixLengthFromSubnetMask(), 21)\n    test.equal(ipaddr.IPv4.parse('255.255.240.0').prefixLengthFromSubnetMask(), 20)\n    test.equal(ipaddr.IPv4.parse('255.255.224.0').prefixLengthFromSubnetMask(), 19)\n    test.equal(ipaddr.IPv4.parse('255.255.192.0').prefixLengthFromSubnetMask(), 18)\n    test.equal(ipaddr.IPv4.parse('255.255.128.0').prefixLengthFromSubnetMask(), 17)\n    test.equal(ipaddr.IPv4.parse('255.255.0.0').prefixLengthFromSubnetMask(), 16)\n    test.equal(ipaddr.IPv4.parse('255.254.0.0').prefixLengthFromSubnetMask(), 15)\n    test.equal(ipaddr.IPv4.parse('255.252.0.0').prefixLengthFromSubnetMask(), 14)\n    test.equal(ipaddr.IPv4.parse('255.248.0.0').prefixLengthFromSubnetMask(), 13)\n    test.equal(ipaddr.IPv4.parse('255.240.0.0').prefixLengthFromSubnetMask(), 12)\n    test.equal(ipaddr.IPv4.parse('255.224.0.0').prefixLengthFromSubnetMask(), 11)\n    test.equal(ipaddr.IPv4.parse('255.192.0.0').prefixLengthFromSubnetMask(), 10)\n    test.equal(ipaddr.IPv4.parse('255.128.0.0').prefixLengthFromSubnetMask(), 9)\n    test.equal(ipaddr.IPv4.parse('255.0.0.0').prefixLengthFromSubnetMask(), 8)\n    test.equal(ipaddr.IPv4.parse('254.0.0.0').prefixLengthFromSubnetMask(), 7)\n    test.equal(ipaddr.IPv4.parse('252.0.0.0').prefixLengthFromSubnetMask(), 6)\n    test.equal(ipaddr.IPv4.parse('248.0.0.0').prefixLengthFromSubnetMask(), 5)\n    test.equal(ipaddr.IPv4.parse('240.0.0.0').prefixLengthFromSubnetMask(), 4)\n    test.equal(ipaddr.IPv4.parse('224.0.0.0').prefixLengthFromSubnetMask(), 3)\n    test.equal(ipaddr.IPv4.parse('192.0.0.0').prefixLengthFromSubnetMask(), 2)\n    test.equal(ipaddr.IPv4.parse('128.0.0.0').prefixLengthFromSubnetMask(), 1)\n    test.equal(ipaddr.IPv4.parse('0.0.0.0').prefixLengthFromSubnetMask(), 0)\n    # negative cases\n    test.equal(ipaddr.IPv4.parse('192.168.255.0').prefixLengthFromSubnetMask(), null)\n    test.equal(ipaddr.IPv4.parse('255.0.255.0').prefixLengthFromSubnetMask(), null)\n    test.done()\n\n  'prefixLengthFromSubnetMask returns proper CIDR notation for standard IPv6 masks': (test) ->\n    test.equal(ipaddr.IPv6.parse('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff').prefixLengthFromSubnetMask(), 128)\n    test.equal(ipaddr.IPv6.parse('ffff:ffff:ffff:ffff::').prefixLengthFromSubnetMask(), 64)\n    test.equal(ipaddr.IPv6.parse('ffff:ffff:ffff:ff80::').prefixLengthFromSubnetMask(), 57)\n    test.equal(ipaddr.IPv6.parse('ffff:ffff:ffff::').prefixLengthFromSubnetMask(), 48)\n    test.equal(ipaddr.IPv6.parse('ffff:ffff:ffff::%z').prefixLengthFromSubnetMask(), 48)\n    test.equal(ipaddr.IPv6.parse('::').prefixLengthFromSubnetMask(), 0)\n    test.equal(ipaddr.IPv6.parse('::%z').prefixLengthFromSubnetMask(), 0)\n    # negative cases\n    test.equal(ipaddr.IPv6.parse('2001:db8::').prefixLengthFromSubnetMask(), null)\n    test.equal(ipaddr.IPv6.parse('ffff:0:0:ffff::').prefixLengthFromSubnetMask(), null)\n    test.equal(ipaddr.IPv6.parse('ffff:0:0:ffff::%z').prefixLengthFromSubnetMask(), null)\n    test.done()\n\n  'subnetMaskFromPrefixLength returns correct IPv4 subnet mask given prefix length': (test) ->\n\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(0), \"0.0.0.0\");\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(1), \"128.0.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(2), \"192.0.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(3), \"224.0.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(4), \"240.0.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(5), \"248.0.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(6), \"252.0.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(7), \"254.0.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(8), \"255.0.0.0\");\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(9), \"255.128.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(10), \"255.192.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(11), \"255.224.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(12), \"255.240.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(13), \"255.248.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(14), \"255.252.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(15), \"255.254.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(16), \"255.255.0.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(17), \"255.255.128.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(18), \"255.255.192.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(19), \"255.255.224.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(20), \"255.255.240.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(21), \"255.255.248.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(22), \"255.255.252.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(23), \"255.255.254.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(24), \"255.255.255.0\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(25), \"255.255.255.128\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(26), \"255.255.255.192\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(27), \"255.255.255.224\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(28), \"255.255.255.240\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(29), \"255.255.255.248\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(30), \"255.255.255.252\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(31), \"255.255.255.254\")\n    test.equal(ipaddr.IPv4.subnetMaskFromPrefixLength(32), \"255.255.255.255\")\n    test.done()\n\n  'broadcastAddressFromCIDR returns correct IPv4 broadcast address': (test) ->\n    test.equal(ipaddr.IPv4.broadcastAddressFromCIDR(\"172.0.0.1/24\"), \"172.0.0.255\")\n    test.equal(ipaddr.IPv4.broadcastAddressFromCIDR(\"172.0.0.1/26\"), \"172.0.0.63\")\n    test.done()\n\n  'networkAddressFromCIDR returns correct IPv4 network address': (test) ->\n    test.equal(ipaddr.IPv4.networkAddressFromCIDR(\"172.0.0.1/24\"), \"172.0.0.0\")\n    test.equal(ipaddr.IPv4.networkAddressFromCIDR(\"172.0.0.1/5\"), \"168.0.0.0\")\n    test.done()\n"
  ]
}