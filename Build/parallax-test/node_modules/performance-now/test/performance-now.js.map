{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/performance-now/test/performance-now.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA;;EAAA,MAAA,GAAS,OAAA,CAAQ,QAAR;;EAET,KAAA,GAAQ,SAAC,EAAD,EAAK,EAAL;WAAY,UAAA,CAAW,EAAX,EAAe,EAAf;EAAZ;;EACR,GAAA,GAAM;;EACN,QAAA,CAAS,KAAT,EAAgB,SAAA;IACd,EAAA,CAAG,6CAAH,EAAkD,SAAA;MAChD,GAAA,GAAM,OAAA,CAAQ,KAAR;aACN,MAAA,CAAO,GAAA,CAAA,CAAA,GAAQ,EAAf;IAFgD,CAAlD;IAIA,EAAA,CAAG,uBAAH,EAA4B,SAAA;aAC1B,MAAA,CAAO,GAAA,CAAA,CAAA,GAAQ,CAAf;IAD0B,CAA5B;IAGA,EAAA,CAAG,kDAAH,EAAuD,SAAA;AACrD,UAAA;MAAA,CAAA,GAAI,GAAA,CAAA;MACJ,CAAA,GAAI,GAAA,CAAA;aACJ,MAAA,CAAO,GAAA,CAAA,CAAA,GAAQ,GAAA,CAAA,CAAf;IAHqD,CAAvD;IAKA,EAAA,CAAG,wCAAH,EAA6C,SAAA;aAC3C,IAAI,CAAC,GAAL,CAAS,GAAA,CAAA,CAAA,GAAQ,GAAA,CAAA,CAAjB,CAAA,GAA0B;IADiB,CAA7C;IAGA,EAAA,CAAG,uCAAH,EAA4C,SAAA;AAC1C,UAAA;AAAA;WAAe,+BAAf;qBAAA,GAAA,CAAA;AAAA;;IAD0C,CAA5C;IAGA,EAAA,CAAG,mEAAH,EAAwE,SAAC,IAAD;AACtE,UAAA;MAAA,CAAA,GAAI,GAAA,CAAA;aACJ,KAAA,CAAM,IAAN,EAAY,SAAA;AACV,YAAA;QAAA,CAAA,GAAI,GAAA,CAAA;QACJ,IAAA,GAAO,CAAA,GAAI;QACX,IAA0D,IAAA,GAAO,GAAjE;AAAA,iBAAO,IAAA,CAAS,IAAA,KAAA,CAAM,QAAA,GAAS,IAAT,GAAc,mBAApB,CAAT,EAAP;;AACA,eAAO,IAAA,CAAK,IAAL;MAJG,CAAZ;IAFsE,CAAxE;WAQA,EAAA,CAAG,yEAAH,EAA8E,SAAC,IAAD;AAC5E,UAAA;MAAA,CAAA,GAAI,GAAA,CAAA;aACJ,KAAA,CAAM,IAAN,EAAY,SAAA;AACV,YAAA;QAAA,CAAA,GAAI,GAAA,CAAA;QACJ,IAAA,GAAO,CAAA,GAAI;QACX,IAA4D,IAAA,GAAO,IAAnE;AAAA,iBAAO,IAAA,CAAS,IAAA,KAAA,CAAM,QAAA,GAAS,IAAT,GAAc,qBAApB,CAAT,EAAP;;AACA,eAAO,IAAA,CAAK,IAAL;MAJG,CAAZ;IAF4E,CAA9E;EA3Bc,CAAhB;AAJA",
  "sourcesContent": [
    "assert = require \"assert\"\n\ndelay = (ms, fn) -> setTimeout fn, ms\nnow = undefined\ndescribe \"now\", ->\n  it \"initially gives a near zero (< 20 ms) time \", ->\n    now = require \"../\"\n    assert now() < 20\n    \n  it \"gives a positive time\", ->\n    assert now() > 0\n\n  it \"two subsequent calls return an increasing number\", ->\n    a = now()\n    b = now()      \n    assert now() < now()\n    \n  it \"has less than 10 microseconds overhead\", ->\n    Math.abs(now() - now()) < 0.010\n  \n  it \"can do 1,000,000 calls really quickly\", ->\n    now() for i in [0...1000000]\n    \n  it \"shows that at least 990 ms has passed after a timeout of 1 second\", (done) ->\n    a = now()\n    delay 1000, ->\n      b = now()\n      diff = b - a\n      return done new Error \"Diff (#{diff}) lower than 990.\" if diff < 990\n      return done null\n\n  it \"shows that not more than 1020 ms has passed after a timeout of 1 second\", (done) ->\n    a = now()\n    delay 1000, ->\n      b = now()\n      diff = b - a\n      return done new Error \"Diff (#{diff}) higher than 1020.\" if diff > 1020\n      return done null        "
  ]
}