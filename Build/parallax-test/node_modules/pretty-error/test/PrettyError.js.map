{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/pretty-error/test/PrettyError.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "chai = require 'chai'\nPrettyError = require '../src/PrettyError'\ndefaultStyle = require '../src/defaultStyle'\n\nchai.should()\n\nisFormatted = (exc) ->\n  exc.stack.indexOf('  \\u001b[0m\\u001b[97m\\u001b[41m') is 0\n\nerror = (what) ->\n  if typeof what is 'string'\n    return error -> throw Error what\n\n  else if what instanceof Function\n    try\n      do what\n    catch e\n      return e\n\n  throw Error \"bad argument for error\"\n\ndescribe \"PrettyError\", ->\n  describe \"constructor()\", ->\n    it \"should work\", ->\n      new PrettyError\n\n  describe \"getObject\", ->\n    it \"should return a string\", ->\n      p = new PrettyError\n      p.getObject(error \"hello\").should.be.an 'object'\n\n  describe \"style\", ->\n    it \"should, by default, return the contents in `default-style`\", ->\n      p = new PrettyError\n      p.style.should.eql defaultStyle()\n\n    it \"should return different contents after appending some styles\", ->\n      p = new PrettyError\n      p.appendStyle 'some selector': 'display': 'block'\n      p.style.should.not.eql defaultStyle()\n\n  describe \"render()\", ->\n    it \"should work\", ->\n      p = new PrettyError\n      p.skipNodeFiles()\n      p.appendStyle 'pretty-error': marginLeft: 4\n\n      e = error -> \"a\".should.equal \"b\"\n      console.log p.render e, no\n\n      e2 = error -> Array.split(Object)\n      console.log p.render e2, no\n\n      e3 = \"Plain error message\"\n      console.log p.render e3, no\n\n      e4 =\n        message: \"Custom error message\"\n        kind: \"Custom Error\"\n\n      console.log p.render e4, no\n\n      e5 =\n        message: \"Error with custom stack\"\n        stack: ['line one', 'line two']\n        wrapper: 'UnhandledRejection'\n\n      console.log p.render e5, no\n\n      e6 = error -> PrettyError.someNonExistingFuncion()\n      console.log p.render e6, no\n\n    it.skip \"should render without colors if pe._useColors is false\", ->\n      p = new PrettyError\n      p.withoutColors()\n      p.skipNodeFiles()\n      p.appendStyle 'pretty-error': marginLeft: 4\n\n      e = error -> \"a\".should.equal \"b\"\n      console.log p.render e, no\n\n  describe \"start()\", ->\n    prepareStackTrace = null\n\n    beforeEach ->\n      {prepareStackTrace} = Error\n      Error.prepareStackTrace = null\n\n    afterEach ->\n      Error.prepareStackTrace = prepareStackTrace\n\n    it \"throws unformatted error when not started\", ->\n      try\n        throw new Error \"foo bar\"\n      catch exc\n\n      isFormatted(exc).should.be.eql false\n\n    it \"throws formatted the error\", ->\n      PrettyError.start()\n\n      try\n        throw new Error \"foo bar\"\n      catch exc\n\n      isFormatted(exc).should.be.eql true\n      exc.stack.split(/\\n/g).length.should.be.above 2\n\n      PrettyError.stop()\n"
  ]
}