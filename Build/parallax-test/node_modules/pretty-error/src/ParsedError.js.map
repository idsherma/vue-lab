{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/pretty-error/src/ParsedError.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "sysPath = require 'path'\n\nmodule.exports = class ParsedError\n  constructor: (@error) ->\n    do @_parse\n\n  _parse: ->\n    @_trace = []\n    @_kind = 'Error'\n    @_wrapper = ''\n\n    @_wrapper = String @error.wrapper if @error.wrapper?\n\n    unless typeof @error is 'object'\n      @_message = String @error\n    else\n      @_stack = @error.stack\n\n      if @error.kind?\n        @_kind = String @error.kind\n      else if typeof @_stack is 'string'\n        if m = @_stack.match /^([a-zA-Z0-9\\_\\$]+):\\ /\n          @_kind = m[1]\n\n      if typeof @_stack is 'string'\n        @_parseStack()\n      else\n        @_message = @error.message? and String(@error.message) or ''\n\n    return\n\n  _parseStack: ->\n    messageLines = []\n    reachedTrace = no\n\n    for line in @_stack.split '\\n'\n      continue if line.trim() is ''\n      if reachedTrace\n        @_trace.push @_parseTraceItem line\n      else\n        if line.match /^\\s*at\\s.+/\n          reachedTrace = yes\n          @_trace.push @_parseTraceItem line\n        else\n          messageLines.push line\n\n    message = messageLines.join '\\n'\n    if message.substr(0, @_kind.length) is @_kind\n      message =\n        message\n        .substr(@_kind.length, message.length)\n        .replace(/^\\:\\s+/, '')\n\n    @_message = message\n\n    return\n\n  _parseTraceItem: (text) ->\n    text = text.trim()\n\n    return if text is ''\n    return text unless text.match /^at\\ /\n\n    # remove the 'at ' part\n    text = text.replace /^at /, ''\n\n    return if text in ['Error (<anonymous>)', 'Error (<anonymous>:null:null)']\n\n    original = text\n\n    # the part that comes before the address\n    what = null\n\n    # address, including path to module and line/col\n    addr = null\n\n    # path to module\n    path = null\n\n    # module dir\n    dir = null\n\n    # module basename\n    file = null\n\n    # line number (if using a compiler, the line number of the module\n    # in that compiler will be used)\n    line = null\n\n    # column, same as above\n    col = null\n\n    # if using a compiler, this will translate to the line number of\n    # the js equivalent of that module\n    jsLine = null\n\n    # like above\n    jsCol = null\n\n    # path that doesn't include `node_module` dirs\n    shortenedPath = null\n\n    # like above\n    shortenedAddr = null\n\n    packageName = '[current]'\n\n    # pick out the address\n    if m = text.match /\\(([^\\)]+)\\)$/\n      addr = m[1].trim()\n\n    if addr?\n      what = text.substr 0, text.length - addr.length - 2\n      what = what.trim()\n\n    # might not have a 'what' clause\n    unless addr?\n      addr = text.trim()\n\n    addr = @_fixPath addr\n    remaining = addr\n\n    # remove the <js> clause if the file is a compiled one\n    if m = remaining.match /\\,\\ <js>:(\\d+):(\\d+)$/\n      jsLine = m[1]\n      jsCol = m[2]\n      remaining = remaining.substr 0, remaining.length - m[0].length\n\n    # the line/col part\n    if m = remaining.match /:(\\d+):(\\d+)$/\n      line = m[1]\n      col = m[2]\n      remaining = remaining.substr 0, remaining.length - m[0].length\n      path = remaining\n\n    # file and dir\n    if path?\n      file = sysPath.basename path\n      dir = sysPath.dirname path\n\n      if dir is '.' then dir = ''\n\n      path = @_fixPath path\n      file = @_fixPath file\n      dir = @_fixPath dir\n\n    if dir?\n      d = dir.replace /[\\\\]{1,2}/g, '/'\n      if m = d.match ///\n          node_modules/([^/]+)(?!.*node_modules.*)\n        ///\n\n        packageName = m[1]\n\n    unless jsLine?\n      jsLine = line\n      jsCol = col\n\n    if path?\n      r = @_rectifyPath path\n      shortenedPath = r.path\n      shortenedAddr = shortenedPath + addr.substr(path.length, addr.length)\n      packages = r.packages\n\n    original: original\n    what: what\n    addr: addr\n    path: path\n    dir: dir\n    file: file\n    line: parseInt line\n    col: parseInt col\n    jsLine: parseInt jsLine\n    jsCol: parseInt jsCol\n    packageName: packageName\n    shortenedPath: shortenedPath\n    shortenedAddr: shortenedAddr\n    packages: packages || []\n\n  _getMessage: -> @_message\n  _getKind: -> @_kind\n  _getWrapper: -> @_wrapper\n  _getStack: -> @_stack\n  _getArguments: -> @error.arguments\n  _getType: -> @error.type\n  _getTrace: -> @_trace\n  _fixPath: (path) -> path.replace(///[\\\\]{1,2}///g, '/')\n\n  _rectifyPath: (path, nameForCurrentPackage) ->\n    path = String path\n    remaining = path\n\n    return path: path, packages: [] unless m = path.match /^(.+?)\\/node_modules\\/(.+)$/\n\n    parts = []\n    packages = []\n\n    if typeof nameForCurrentPackage is 'string'\n      parts.push \"[#{nameForCurrentPackage}]\"\n      packages.push \"[#{nameForCurrentPackage}]\"\n    else\n      parts.push \"[#{m[1].match(/([^\\/]+)$/)[1]}]\"\n      packages.push m[1].match(/([^\\/]+)$/)[1]\n\n    rest = m[2]\n\n    while m = rest.match /([^\\/]+)\\/node_modules\\/(.+)$/\n      parts.push \"[#{m[1]}]\"\n      packages.push m[1]\n      rest = m[2]\n\n    if m = rest.match /([^\\/]+)\\/(.+)$/\n      parts.push \"[#{m[1]}]\"\n      packages.push m[1]\n      rest = m[2]\n\n    parts.push rest\n\n    path: parts.join \"/\"\n    packages: packages\n\nfor prop in ['message', 'kind', 'arguments', 'type', 'stack', 'trace', 'wrapper'] then do ->\n  methodName = '_get' + prop[0].toUpperCase() + prop.substr(1, prop.length)\n\n  Object.defineProperty ParsedError::, prop,\n    get: -> this[methodName]()"
  ]
}