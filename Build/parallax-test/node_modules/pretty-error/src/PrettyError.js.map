{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/pretty-error/src/PrettyError.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "{object, array} = require 'utila'\ndefaultStyle = require './defaultStyle'\nParsedError = require './ParsedError'\nnodePaths = require './nodePaths'\nRenderKid = require 'renderkid'\n\ninstance = null\n\nmodule.exports = class PrettyError\n  self = @\n\n  @_filters:\n    'module.exports': (item) ->\n      return unless item.what?\n      item.what = item.what.replace /\\.module\\.exports\\./g, ' - '\n      return\n\n  @_getDefaultStyle: ->\n    defaultStyle()\n\n  @start: ->\n    unless instance?\n      instance = new self\n      instance.start()\n\n    instance\n\n  @stop: ->\n    instance?.stop()\n\n  constructor: ->\n    @_useColors = yes\n    @_maxItems = 50\n    @_packagesToSkip = []\n    @_pathsToSkip = []\n    @_skipCallbacks = []\n    @_filterCallbacks = []\n    @_parsedErrorFilters = []\n    @_aliases = []\n    @_renderer = new RenderKid\n    @_style = self._getDefaultStyle()\n    @_renderer.style @_style\n\n  start: ->\n    @_oldPrepareStackTrace = Error.prepareStackTrace\n\n    prepeare = @_oldPrepareStackTrace or (exc, frames) ->\n      result = exc.toString()\n      frames = frames.map (frame) -> \"  at #{frame.toString()}\"\n      result + \"\\n\" + frames.join \"\\n\"\n\n    # https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n    Error.prepareStackTrace = (exc, trace) =>\n      stack = prepeare.apply(null, arguments)\n      @render {stack, message: exc.toString().replace /^.*: /, ''}, no\n\n    @\n\n  stop: ->\n    Error.prepareStackTrace = @_oldPrepareStackTrace\n    @_oldPrepareStackTrace = null\n\n  config: (c) ->\n    if c.skipPackages?\n      if c.skipPackages is no\n        @unskipAllPackages()\n      else\n        @skipPackage.apply @, c.skipPackages\n\n    if c.skipPaths?\n      if c.skipPaths is no\n        @unskipAllPaths()\n      else\n        @skipPath.apply @, c.skipPaths\n\n    if c.skip?\n      if c.skip is no\n        @unskipAll()\n      else\n        @skip.apply @, c.skip\n\n    if c.maxItems?\n      @setMaxItems c.maxItems\n\n    if c.skipNodeFiles is yes\n      @skipNodeFiles()\n    else if c.skipNodeFiles is no\n      @unskipNodeFiles()\n\n    if c.filters?\n      if c.filters is no\n        @removeAllFilters()\n      else\n        @filter.apply @, c.filters\n\n    if c.parsedErrorFilters?\n      if c.parsedErrorFilters is no\n        @removeAllParsedErrorFilters()\n      else\n        @filterParsedError.apply @, c.parsedErrorFilters\n\n    if c.aliases?\n      if object.isBareObject c.aliases\n        @alias path, alias for path, alias of c.aliases\n      else if c.aliases is no\n        @removeAllAliases()\n\n    @\n\n  withoutColors: ->\n    @_useColors = false\n    @\n\n  withColors: ->\n    @_useColors = true\n    @\n\n  skipPackage: (packages...) ->\n    @_packagesToSkip.push String pkg for pkg in packages\n    @\n\n  unskipPackage: (packages...) ->\n    array.pluckOneItem(@_packagesToSkip, pkg) for pkg in packages\n    @\n\n  unskipAllPackages: ->\n    @_packagesToSkip.length = 0\n    @\n\n  skipPath: (paths...) ->\n    @_pathsToSkip.push path for path in paths\n    @\n\n  unskipPath: (paths...) ->\n    array.pluckOneItem(@_pathsToSkip, path) for path in paths\n    @\n\n  unskipAllPaths: ->\n    @_pathsToSkip.length = 0\n    @\n\n  skip: (callbacks...) ->\n    @_skipCallbacks.push cb for cb in callbacks\n    @\n\n  unskip: (callbacks...) ->\n    array.pluckOneItem(@_skipCallbacks, cb) for cb in callbacks\n    @\n\n  unskipAll: ->\n    @_skipCallbacks.length = 0\n    @\n\n  skipNodeFiles: ->\n    @skipPath.apply @, nodePaths\n\n  unskipNodeFiles: ->\n    @unskipPath.apply @, nodePaths\n\n  filter: (callbacks...) ->\n    @_filterCallbacks.push cb for cb in callbacks\n    @\n\n  removeFilter: (callbacks...) ->\n    array.pluckOneItem(@_filterCallbacks, cb) for cb in callbacks\n    @\n\n  removeAllFilters: ->\n    @_filterCallbacks.length = 0\n    @\n\n  filterParsedError: (callbacks...) ->\n    @_parsedErrorFilters.push cb for cb in callbacks\n    @\n\n  removeParsedErrorFilter: (callbacks...) ->\n    array.pluckOneItem(@_parsedErrorFilters, cb) for cb in callbacks\n    @\n\n  removeAllParsedErrorFilters: ->\n    @_parsedErrorFilters.length = 0\n    @\n\n  setMaxItems: (maxItems = 50) ->\n    if maxItems is 0 then maxItems = 50\n    @_maxItems = maxItems|0\n    @\n\n  alias: (stringOrRx, alias) ->\n    @_aliases.push {stringOrRx, alias}\n    @\n\n  removeAlias: (stringOrRx) ->\n    array.pluckByCallback @_aliases, (pair) ->\n      pair.stringOrRx is stringOrRx\n\n    @\n\n  removeAllAliases: ->\n    @_aliases.length = 0\n    @\n\n  _getStyle: ->\n    @_style\n\n  appendStyle: (toAppend) ->\n    object.appendOnto @_style, toAppend\n    @_renderer.style toAppend\n    @\n\n  _getRenderer: ->\n    @_renderer\n\n  render: (e, logIt = no, useColors = @_useColors) ->\n    obj = @getObject e\n    rendered = @_renderer.render(obj, useColors)\n    console.error rendered if logIt is yes\n    rendered\n\n  getObject: (e) ->\n    unless e instanceof ParsedError\n      e = new ParsedError e\n\n    @_applyParsedErrorFiltersOn e\n\n    header =\n      title: do ->\n        ret = {}\n\n        # some errors are thrown to display other errors.\n        # we call them wrappers here.\n        if e.wrapper isnt ''\n          ret.wrapper = \"#{e.wrapper}\"\n\n        ret.kind = e.kind\n        ret\n\n      colon: ':'\n\n      message: String(e.message).trim()\n\n    traceItems = []\n    count = -1\n\n    for item, i in e.trace\n      continue unless item?\n      continue if @_skipOrFilter(item, i) is yes\n\n      count++\n\n      break if count > @_maxItems\n\n      if typeof item is 'string'\n        traceItems.push item: custom: item\n        continue\n\n      traceItems.push do ->\n        markupItem = item:\n          header:\n            pointer: do ->\n              return '' unless item.file?\n\n              file: item.file\n              colon: ':'\n              line: item.line\n\n          footer: do ->\n            foooter = addr: item.shortenedAddr\n            if item.extra? then foooter.extra = item.extra\n            foooter\n\n        markupItem.item.header.what = item.what if typeof item.what is 'string' and item.what.trim().length > 0\n        markupItem\n\n\n    obj = 'pretty-error':\n      header: header\n\n    if traceItems.length > 0\n      obj['pretty-error'].trace = traceItems\n\n    obj\n\n  _skipOrFilter: (item, itemNumber) ->\n    if typeof item is 'object'\n      return yes if item.modName in @_packagesToSkip\n      return yes if item.path in @_pathsToSkip\n\n      for modName in item.packages\n        return yes if modName in @_packagesToSkip\n\n      if typeof item.shortenedAddr is 'string'\n        for pair in @_aliases\n          item.shortenedAddr = item.shortenedAddr.replace pair.stringOrRx, pair.alias\n\n    for cb in @_skipCallbacks\n      return yes if cb(item, itemNumber) is yes\n\n    for cb in @_filterCallbacks\n      cb(item, itemNumber)\n\n    return no\n\n  _applyParsedErrorFiltersOn: (error) ->\n    for cb in @_parsedErrorFilters\n      cb error\n\n    return\n\nfor prop in ['renderer', 'style'] then do ->\n  methodName = '_get' + prop[0].toUpperCase() + prop.substr(1, prop.length)\n  PrettyError::__defineGetter__ prop, -> do @[methodName]\n"
  ]
}