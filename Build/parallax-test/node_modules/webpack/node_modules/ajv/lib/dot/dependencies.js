if(undefined==window.JST){window.JST={};} window.JST["dependencies"] = function(obj){var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('{{# def.definitions }}\n{{# def.errors }}\n{{# def.missing }}\n{{# def.setupKeyword }}\n{{# def.setupNextLevel }}\n\n\n{{## def.propertyInData:\n  {{=$data}}{{= it.util.getProperty($property) }} !== undefined\n  {{? $ownProperties }}\n    && Object.prototype.hasOwnProperty.call({{=$data}}, \'{{=it.util.escapeQuotes($property)}}\')\n  {{?}}\n#}}\n\n\n{{\n  var $schemaDeps = {}\n    , $propertyDeps = {}\n    , $ownProperties = it.opts.ownProperties;\n\n  for ($property in $schema) {\n    var $sch = $schema[$property];\n    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;\n    $deps[$property] = $sch;\n  }\n}}\n\nvar {{=$errs}} = errors;\n\n{{ var $currentErrorPath = it.errorPath; }}\n\nvar missing{{=$lvl}};\n{{ for (var $property in $propertyDeps) { }}\n  {{ $deps = $propertyDeps[$property]; }}\n  {{? $deps.length }}\n    if ({{# def.propertyInData }}\n      {{? $breakOnError }}\n          && ({{# def.checkMissingProperty:$deps }})) {\n          {{# def.errorMissingProperty:\'dependencies\' }}\n      {{??}}\n        ) {\n          {{~ $deps:$propertyKey }}\n            {{# def.allErrorsMissingProperty:\'dependencies\' }}\n          {{~}}\n      {{?}}\n    } {{# def.elseIfValid }}\n  {{?}}\n{{ } }}\n\n{{\n  it.errorPath = $currentErrorPath;\n  var $currentBaseId = $it.baseId;\n}}\n\n\n{{ for (var $property in $schemaDeps) { }}\n  {{ var $sch = $schemaDeps[$property]; }}\n  {{? {{# def.nonEmptySchema:$sch }} }}\n    {{=$nextValid}} = true;\n\n    if ({{# def.propertyInData }}) {\n      {{ \n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + it.util.getProperty($property);\n        $it.errSchemaPath = $errSchemaPath + \'/\' + it.util.escapeFragment($property);\n      }}\n\n      {{# def.insertSubschemaCode }}\n    }\n\n    {{# def.ifResultValid }}\n  {{?}}\n{{ } }}\n\n{{? $breakOnError }} \n  {{= $closingBraces }}\n  if ({{=$errs}} == errors) {\n{{?}}\n\n{{# def.cleanUp }}\n');}return __p.join('');}