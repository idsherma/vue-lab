if(undefined==window.JST){window.JST={};} window.JST["contains"] = function(obj){var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('{{# def.definitions }}\n{{# def.errors }}\n{{# def.setupKeyword }}\n{{# def.setupNextLevel }}\n\n\n{{\n  var $idx = \'i\' + $lvl\n    , $dataNxt = $it.dataLevel = it.dataLevel + 1\n    , $nextData = \'data\' + $dataNxt\n    , $currentBaseId = it.baseId\n    , $nonEmptySchema = {{# def.nonEmptySchema:$schema }};\n}}\n\nvar {{=$errs}} = errors;\nvar {{=$valid}};\n\n{{? $nonEmptySchema }}\n  {{# def.setCompositeRule }}\n\n  {{\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n  }}\n\n  var {{=$nextValid}} = false;\n\n  for (var {{=$idx}} = 0; {{=$idx}} < {{=$data}}.length; {{=$idx}}++) {\n    {{\n      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n      var $passData = $data + \'[\' + $idx + \']\';\n      $it.dataPathArr[$dataNxt] = $idx;\n    }}\n\n    {{# def.generateSubschemaCode }}\n    {{# def.optimizeValidate }}\n\n    if ({{=$nextValid}}) break;\n  }\n\n  {{# def.resetCompositeRule }}\n  {{= $closingBraces }}\n\n  if (!{{=$nextValid}}) {\n{{??}}\n  if ({{=$data}}.length == 0) {\n{{?}}\n\n    {{# def.error:\'contains\' }}\n  } else {\n    {{? $nonEmptySchema }}\n      {{# def.resetErrors }}\n    {{?}}\n  {{? it.opts.allErrors }} } {{?}}\n\n{{# def.cleanUp }}\n');}return __p.join('');}