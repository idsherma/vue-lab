{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/renderkid/test/RenderKid.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "RenderKid = require '../src/RenderKid'\n{strip} = require '../src/AnsiPainter'\n\nmatch = (input, expected, setStuff) ->\n  r = new RenderKid\n  r.style\n    span:\n      display: 'inline'\n    div:\n      display: 'block'\n\n  setStuff?(r)\n  strip(r.render(input)).trim().should.equal expected.trim()\n\ndescribe \"RenderKid\", ->\n  describe \"constructor()\", ->\n    it \"should work\", ->\n      new RenderKid\n\n  describe \"whitespace management - inline\", ->\n    it \"shouldn't put extra whitespaces\", ->\n      input = \"\"\"\n\n      a<span>b</span>c\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        abc\n\n      \"\"\"\n\n      match input, expected\n\n    it \"should allow 1 whitespace character on each side\", ->\n      input = \"\"\"\n\n      a<span>   b     </span>c\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        a b c\n\n      \"\"\"\n\n      match input, expected\n\n    it \"should eliminate extra whitespaces inside text\", ->\n      input = \"\"\"\n\n      a<span>b1 \\n  b2</span>c\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        ab1 b2c\n\n      \"\"\"\n\n      match input, expected\n\n    it \"should allow line breaks with <br />\", ->\n      input = \"\"\"\n\n      a<span>b1<br />b2</span>c\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        ab1\\nb2c\n\n      \"\"\"\n\n      match input, expected\n\n    it \"should allow line breaks with &nl;\", ->\n      input = \"\"\"\n\n      a<span>b1&nl;b2</span>c\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        ab1\\nb2c\n\n      \"\"\"\n\n      match input, expected\n\n    it \"should allow whitespaces with &sp;\", ->\n      input = \"\"\"\n\n      a<span>b1&sp;b2</span>c\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        ab1 b2c\n\n      \"\"\"\n\n      match input, expected\n\n  describe \"whitespace management - block\", ->\n    it \"should add one linebreak between two blocks\", ->\n      input = \"\"\"\n\n        <div>a</div>\n        <div>b</div>\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        a\n        b\n\n      \"\"\"\n\n      match input, expected\n\n    it \"should ignore empty blocks\", ->\n      input = \"\"\"\n\n        <div>a</div>\n        <div></div>\n        <div>b</div>\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        a\n        b\n\n      \"\"\"\n\n      match input, expected\n\n    it \"should add an extra linebreak between two adjacent blocks inside an inline\", ->\n      input = \"\"\"\n\n        <span>\n          <div>a</div>\n          <div>b</div>\n        </span>\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        a\n\n        b\n\n      \"\"\"\n\n      match input, expected\n\n    it \"example: div(marginBottom:1)+div\", ->\n      input = \"\"\"\n\n        <div class=\"first\">a</div>\n        <div>b</div>\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        a\n\n        b\n\n      \"\"\"\n\n      match input, expected, (r) ->\n        r.style '.first': marginBottom: 1\n\n    it \"example: div+div(marginTop:1)\", ->\n      input = \"\"\"\n\n        <div>a</div>\n        <div class=\"second\">b</div>\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        a\n\n        b\n\n      \"\"\"\n\n      match input, expected, (r) ->\n        r.style '.second': marginTop: 1\n\n    it \"example: div(marginBottom:1)+div(marginTop:1)\", ->\n      input = \"\"\"\n\n        <div class=\"first\">a</div>\n        <div class=\"second\">b</div>\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        a\n\n\n        b\n\n      \"\"\"\n\n      match input, expected, (r) ->\n        r.style\n          '.first': marginBottom: 1\n          '.second': marginTop: 1\n\n    it \"example: div(marginBottom:2)+div(marginTop:1)\", ->\n      input = \"\"\"\n\n        <div class=\"first\">a</div>\n        <div class=\"second\">b</div>\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        a\n\n\n\n        b\n\n      \"\"\"\n\n      match input, expected, (r) ->\n        r.style\n          '.first': marginBottom: 2\n          '.second': marginTop: 1\n\n    it \"example: div(marginBottom:2)+span+div(marginTop:1)\", ->\n      input = \"\"\"\n\n        <div class=\"first\">a</div>\n        <span>span</span>\n        <div class=\"second\">b</div>\n\n      \"\"\"\n\n      expected = \"\"\"\n\n        a\n\n\n        span\n\n        b\n\n      \"\"\"\n\n      match input, expected, (r) ->\n        r.style\n          '.first': marginBottom: 2\n          '.second': marginTop: 1"
  ]
}