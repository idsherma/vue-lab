{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/renderkid/test/layout/SpecialString.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "S = require '../../src/layout/SpecialString'\n\ndescribe \"SpecialString\", ->\n  describe 'SpecialString()', ->\n    it 'should return instance', ->\n      S('s').should.be.instanceOf S\n\n  describe 'length()', ->\n    it 'should return correct length for normal text', ->\n      S('hello').length.should.equal 5\n\n    it 'should return correct length for text containing tabs and tags', ->\n      S('<a>he<you />l\\tlo</a>').length.should.equal 13\n\n    it \"shouldn't count empty tags as tags\", ->\n      S('<>><').length.should.equal 4\n\n    it \"should count length of single tag as 0\", ->\n      S('<html>').length.should.equal 0\n\n    it \"should work correctly with html quoted characters\", ->\n      S(' &gt;&lt; &sp;').length.should.equal 5\n\n  describe 'splitIn()', ->\n    it \"should work correctly with normal text\", ->\n      S(\"123456\").splitIn(3).should.be.like ['123', '456']\n\n    it \"should work correctly with normal text containing tabs and tags\", ->\n      S(\"12\\t3<hello>456\").splitIn(3).should.be.like ['12', '\\t', '3<hello>45', '6']\n\n    it \"should not trimLeft all lines when trimLeft is no\", ->\n      S('abc def').splitIn(3).should.be.like ['abc', ' de', 'f']\n\n    it \"should trimLeft all lines when trimLeft is true\", ->\n      S('abc def').splitIn(3, yes).should.be.like ['abc', 'def']\n\n  describe 'cut()', ->\n    it \"should work correctly with text containing tabs and tags\", ->\n      original = S(\"12\\t3<hello>456\")\n      cut = original.cut(2, 3)\n      original.str.should.equal '123<hello>456'\n      cut.str.should.equal '\\t'\n\n    it \"should trim left when trimLeft is true\", ->\n      original = S ' 132'\n      cut = original.cut 0, 1, yes\n      original.str.should.equal '32'\n      cut.str.should.equal '1'\n\n    it \"should be greedy\", ->\n      S(\"ab<tag>a\").cut(0, 2).str.should.equal \"ab<tag>\"\n\n  describe 'isOnlySpecialChars()', ->\n    it \"should work\", ->\n      S(\"12\\t3<hello>456\").isOnlySpecialChars().should.equal no\n      S(\"<hello>\").isOnlySpecialChars().should.equal yes\n\n  describe 'clone()', ->\n    it \"should return independent instance\", ->\n      a = S('hello')\n      b = a.clone()\n      a.str.should.equal b.str\n      a.should.not.equal b\n\n  describe 'trim()', ->\n    it \"should return an independent instance\", ->\n      s = S('')\n      s.trim().should.not.equal s\n\n    it 'should return the same string when trim is not required', ->\n      S('hello').trim().str.should.equal 'hello'\n\n    it 'should return trimmed string', ->\n      S(' hello').trim().str.should.equal 'hello'\n\n  describe 'trimLeft()', ->\n    it \"should only trim on the left\", ->\n      S(' hello ').trimLeft().str.should.equal 'hello '\n\n  describe 'trimRight()', ->\n    it \"should only trim on the right\", ->\n      S(' hello ').trimRight().str.should.equal ' hello'"
  ]
}