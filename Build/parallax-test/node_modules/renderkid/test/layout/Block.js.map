{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/renderkid/test/layout/Block.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Layout = require '../../src/Layout'\n{object} = require 'utila'\n\n{open, get, conf} = do ->\n  show = (layout) ->\n    got = layout.get()\n    got = got.replace /<[^>]+>/g, ''\n\n  defaultBlockConfig =\n    linePrependor: options: amount: 2\n\n  c = (add = {}) ->\n    object.append defaultBlockConfig, add\n\n  ret = {}\n\n  ret.open = (block, name, top = 0, bottom = 0) ->\n    config = c\n      blockPrependor: options: amount: top\n      blockAppendor: options: amount: bottom\n\n    b = block.openBlock config, name\n    b.write name + ' | top ' + top + ' bottom ' + bottom\n    b\n\n  ret.get = (layout) ->\n    layout.get().replace(/<[^>]+>/g, '')\n\n  ret.conf = (props) ->\n    config = {}\n    if props.left?\n      object.appendOnto config, linePrependor: options: amount: props.left\n\n    if props.right?\n      object.appendOnto config, lineAppendor:  options: amount: props.right\n\n    if props.top?\n      object.appendOnto config, blockPrependor: options: amount: props.top\n\n    if props.bottom?\n      object.appendOnto config, blockAppendor:  options: amount: props.bottom\n\n    if props.width?\n      object.appendOnto config, width: props.width\n\n    if props.bullet is yes\n      object.appendOnto config, linePrependor: options: bullet: {char: '-', alignment: 'left'}\n\n    config\n\n  ret\n\n\ndescribe \"Layout\", ->\n  describe \"inline inputs\", ->\n    it \"should be merged\", ->\n      l = new Layout\n\n      l.write 'a'\n      l.write 'b'\n\n      get(l).should.equal 'ab'\n\n    it \"should be correctly wrapped\", ->\n      l = new Layout\n      block = l.openBlock conf width: 20\n      block.write '123456789012345678901234567890'\n      block.close()\n      get(l).should.equal '12345678901234567890\\n1234567890'\n\n    it \"should trim from left when wrapping to a new line\", ->\n      l = new Layout\n      block = l.openBlock conf width: 20\n      block.write '12345678901234567890 \\t 123456789012345678901'\n      block.close()\n      get(l).should.equal '12345678901234567890\\n12345678901234567890\\n1'\n\n    it \"should handle line breaks correctly\", ->\n      l = new Layout\n      block = l.openBlock conf width: 20\n      block.write '\\na\\n\\nb\\n'\n      block.close()\n      get(l).should.equal '\\na\\n\\nb\\n'\n\n    it \"should not put extra line breaks when a line is already broken\", ->\n      l = new Layout\n      block = l.openBlock conf width: 20\n      block.write '01234567890123456789\\n0123456789'\n      block.close()\n      get(l).should.equal '01234567890123456789\\n0123456789'\n\n  describe \"horizontal margins\", ->\n    it \"should account for left margins\", ->\n      l = new Layout\n      block = l.openBlock conf width: 20, left: 2\n      block.write '01'\n      block.close()\n      get(l).should.equal '  01'\n\n    it \"should account for right margins\", ->\n      l = new Layout\n      block = l.openBlock conf width: 20, right: 2\n      block.write '01'\n      block.close()\n      get(l).should.equal '01  '\n\n    it \"should account for both margins\", ->\n      l = new Layout\n      block = l.openBlock conf width: 20, right: 2, left: 1\n      block.write '01'\n      block.close()\n      get(l).should.equal ' 01  '\n\n    it \"should break lines according to left margins\", ->\n      l = new Layout\n      global.tick = yes\n      block = l.openBlock conf width: 20, left: 2\n      block.write '01234567890123456789'\n      block.close()\n      global.tick = no\n      get(l).should.equal '  01234567890123456789'\n\n    it \"should break lines according to right margins\", ->\n      l = new Layout\n      block = l.openBlock conf width: 20, right: 2\n      block.write '01234567890123456789'\n      block.close()\n      get(l).should.equal '01234567890123456789  '\n\n    it \"should break lines according to both margins\", ->\n      l = new Layout\n      block = l.openBlock conf width: 20, right: 2, left: 1\n      block.write '01234567890123456789'\n      block.close()\n      get(l).should.equal ' 01234567890123456789  '\n\n    it \"should break lines according to terminal width\", ->\n      l = new Layout terminalWidth: 20\n      block = l.openBlock conf right: 2, left: 1\n      block.write '01234567890123456789'\n      block.close()\n\n      # Note: We don't expect ' 01234567890123456  \\n 789  ',\n      # since the first line (' 01234567890123456  ') is a full line\n      # according to layout.config.terminalWidth and doesn't need\n      # a break line.\n      get(l).should.equal ' 01234567890123456   789  '\n\n  describe \"lines and blocks\", ->\n    it \"should put one break line between: line, block\", ->\n      l = new Layout\n      l.write 'a'\n      l.openBlock().write('b').close()\n      get(l).should.equal 'a\\nb'\n\n    it \"should put one break line between: block, line\", ->\n      l = new Layout\n      l.openBlock().write('a').close()\n      l.write 'b'\n      get(l).should.equal 'a\\nb'\n\n    it \"should put one break line between: line, block, line\", ->\n      l = new Layout\n      l.write 'a'\n      l.openBlock().write('b').close()\n      l.write 'c'\n      get(l).should.equal 'a\\nb\\nc'\n\n    it \"margin top should work for: line, block\", ->\n      l = new Layout\n      l.write 'a'\n      l.openBlock(conf top: 2).write('b').close()\n      get(l).should.equal 'a\\n\\n\\nb'\n\n    it \"margin top should work for: block, line\", ->\n      l = new Layout\n      l.openBlock(conf top: 1).write('a').close()\n      l.write 'b'\n      get(l).should.equal '\\na\\nb'\n\n    it \"margin top should work for: block, line, when block starts with a break\", ->\n      l = new Layout\n      l.openBlock(conf top: 1).write('\\na').close()\n      l.write 'b'\n      get(l).should.equal '\\n\\na\\nb'\n\n    it \"margin top should work for: line, block, when line ends with a break\", ->\n      l = new Layout\n      l.write 'a\\n'\n      l.openBlock(conf top: 1).write('b').close()\n      get(l).should.equal 'a\\n\\n\\nb'\n\n    it \"margin top should work for: line, block, when there are two breaks in between\", ->\n      l = new Layout\n      l.write 'a\\n'\n      l.openBlock(conf top: 1).write('\\nb').close()\n      get(l).should.equal 'a\\n\\n\\n\\nb'\n\n    it \"margin bottom should work for: line, block\", ->\n      l = new Layout\n      l.write 'a'\n      l.openBlock(conf bottom: 1).write('b').close()\n      get(l).should.equal 'a\\nb\\n'\n\n    it \"margin bottom should work for: block, line\", ->\n      l = new Layout\n      l.openBlock(conf bottom: 1).write('a').close()\n      l.write 'b'\n      get(l).should.equal 'a\\n\\nb'\n\n    it \"margin bottom should work for: block, line, when block ends with a break\", ->\n      l = new Layout\n      l.openBlock(conf bottom: 1).write('a\\n').close()\n      l.write 'b'\n      get(l).should.equal 'a\\n\\n\\nb'\n\n    it \"margin bottom should work for: block, line, when line starts with a break\", ->\n      l = new Layout\n      l.openBlock(conf bottom: 1).write('a').close()\n      l.write '\\nb'\n      get(l).should.equal 'a\\n\\n\\nb'\n\n    it \"margin bottom should work for: block, line, when there are two breaks in between\", ->\n      l = new Layout\n      l.openBlock(conf bottom: 1).write('a\\n').close()\n      l.write '\\nb'\n      get(l).should.equal 'a\\n\\n\\n\\nb'\n\n  describe \"blocks and blocks\", ->\n    it \"should not get extra break lines for full-width lines\", ->\n      l = new Layout\n      l.openBlock(conf width: 20).write('01234567890123456789').close()\n      l.openBlock().write('b').close()\n      get(l).should.equal '01234567890123456789\\nb'\n\n    it \"should not get extra break lines for full-width lines followed by a margin\", ->\n      l = new Layout\n      l.openBlock(conf width: 20, bottom: 1).write('01234567890123456789').close()\n      l.openBlock().write('b').close()\n      get(l).should.equal '01234567890123456789\\n\\nb'\n\n    it \"a(top: 0, bottom: 0) b(top: 0, bottom: 0)\", ->\n      l = new Layout\n      l.openBlock().write('a').close()\n      l.openBlock().write('b').close()\n      get(l).should.equal 'a\\nb'\n\n    it \"a(top: 0, bottom: 0) b(top: 1, bottom: 0)\", ->\n      l = new Layout\n      l.openBlock().write('a').close()\n      l.openBlock(conf(top: 1)).write('b').close()\n      get(l).should.equal 'a\\n\\nb'\n\n    it \"a(top: 0, bottom: 1) b(top: 0, bottom: 0)\", ->\n      l = new Layout\n      l.openBlock(conf(bottom: 1)).write('a').close()\n      l.openBlock().write('b').close()\n      get(l).should.equal 'a\\n\\nb'\n\n    it \"a(top: 0, bottom: 1   ) b(   top: 1, bottom: 0)\", ->\n      l = new Layout\n      l.openBlock(conf(bottom: 1)).write('a').close()\n      l.openBlock(conf(top: 1)).write('b').close()\n      get(l).should.equal 'a\\n\\n\\nb'\n\n    it \"a(top: 0, bottom: 1 br) b(br top: 1, bottom: 0)\", ->\n      l = new Layout\n      l.openBlock(conf(bottom: 1)).write('a\\n').close()\n      l.openBlock(conf(top: 1)).write('\\nb').close()\n      get(l).should.equal 'a\\n\\n\\n\\n\\nb'\n\n    it \"a(top: 2, bottom: 3 a1-br-a2) b(br-b1-br-br-b2-br top: 2, bottom: 3)\", ->\n      l = new Layout\n      l.openBlock(conf(top: 2, bottom: 3)).write('a1\\na2').close()\n      l.openBlock(conf(top: 2, bottom: 3)).write('\\nb1\\n\\nb2\\n').close()\n      get(l).should.equal '\\n\\na1\\na2\\n\\n\\n\\n\\n\\n\\nb1\\n\\nb2\\n\\n\\n\\n'\n\n  describe \"nesting\", ->\n    it \"should break one line for nested blocks\", ->\n      l = new Layout\n      l.write 'a'\n      b = l.openBlock()\n      c = b.openBlock().write('c').close()\n      b.close()\n      get(l).should.equal 'a\\nc'\n\n    it \"a(left: 2) > b(top: 2)\", ->\n      l = new Layout\n      a = l.openBlock(conf(left: 2))\n      a.openBlock(conf(top: 2)).write('b').close()\n      a.close()\n      get(l).should.equal '  \\n  \\n  b'\n\n    it \"a(left: 2) > b(bottom: 2)\", ->\n      l = new Layout\n      a = l.openBlock(conf(left: 2))\n      a.openBlock(conf(bottom: 2)).write('b').close()\n      a.close()\n      get(l).should.equal '  b\\n  \\n  '\n\n  describe \"bullets\", ->\n    it \"basic bullet\", ->\n      l = new Layout\n      l.openBlock(conf(left: 3, bullet: yes)).write('a').close()\n      get(l).should.equal '-  a'\n\n    it \"a(left: 3, bullet) > b(top:1)\", ->\n      l = new Layout\n      a = l.openBlock(conf(left: 3, bullet: yes))\n      b = a.openBlock(conf(top: 1)).write('b').close()\n      a.close()\n      get(l).should.equal '-  \\n   b'"
  ]
}