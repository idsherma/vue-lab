if(undefined==window.JST){window.JST={};} window.JST["properties"] = function(obj){var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('{{# def.definitions }}\n{{# def.errors }}\n{{# def.setupKeyword }}\n{{# def.setupNextLevel }}\n\n\n{{## def.validateAdditional:\n  {{ /* additionalProperties is schema */\n    $it.schema = $aProperties;\n    $it.schemaPath = it.schemaPath + \'.additionalProperties\';\n    $it.errSchemaPath = it.errSchemaPath + \'/additionalProperties\';\n    $it.errorPath = it.opts._errorDataPathProperty\n                    ? it.errorPath\n                    : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n    var $passData = $data + \'[\' + $key + \']\';\n    $it.dataPathArr[$dataNxt] = $key;\n  }}\n\n  {{# def.generateSubschemaCode }}\n  {{# def.optimizeValidate }}\n#}}\n\n\n{{\n  var $key = \'key\' + $lvl\n    , $dataNxt = $it.dataLevel = it.dataLevel + 1\n    , $nextData = \'data\' + $dataNxt;\n\n  var $schemaKeys = Object.keys($schema || {})\n    , $pProperties = it.schema.patternProperties || {}\n    , $pPropertyKeys = Object.keys($pProperties)\n    , $aProperties = it.schema.additionalProperties\n    , $someProperties = $schemaKeys.length || $pPropertyKeys.length\n    , $noAdditional = $aProperties === false\n    , $additionalIsSchema = typeof $aProperties == \'object\'\n                              && Object.keys($aProperties).length\n    , $removeAdditional = it.opts.removeAdditional\n    , $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional\n    , $ownProperties = it.opts.ownProperties\n    , $currentBaseId = it.baseId;\n\n  var $required = it.schema.required;\n  if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired)\n    var $requiredHash = it.util.toHash($required);\n\n  if (it.opts.v5) {\n    var $pgProperties = it.schema.patternGroups || {}\n      , $pgPropertyKeys = Object.keys($pgProperties);\n  }\n}}\n\n\nvar {{=$errs}} = errors;\nvar {{=$nextValid}} = true;\n\n{{? $checkAdditional }}\n  for (var {{=$key}} in {{=$data}}) {\n    {{# def.checkOwnProperty }}\n    {{? $someProperties }}\n      var isAdditional{{=$lvl}} = !(false\n        {{? $schemaKeys.length }}\n          {{? $schemaKeys.length > 5 }}\n            || validate.schema{{=$schemaPath}}[{{=$key}}]\n          {{??}}\n            {{~ $schemaKeys:$propertyKey }}\n              || {{=$key}} == {{= it.util.toQuotedString($propertyKey) }}\n            {{~}}\n          {{?}}\n        {{?}}\n        {{? $pPropertyKeys.length }}\n          {{~ $pPropertyKeys:$pProperty:$i }}\n            || {{= it.usePattern($pProperty) }}.test({{=$key}})\n          {{~}}\n        {{?}}\n        {{? it.opts.v5 && $pgPropertyKeys && $pgPropertyKeys.length }}\n          {{~ $pgPropertyKeys:$pgProperty:$i }}\n            || {{= it.usePattern($pgProperty) }}.test({{=$key}})\n          {{~}}\n        {{?}}\n      );\n\n      if (isAdditional{{=$lvl}}) {\n    {{?}}\n    {{? $removeAdditional == \'all\' }}\n      delete {{=$data}}[{{=$key}}];\n    {{??}}\n      {{\n        var $currentErrorPath = it.errorPath;\n        var $additionalProperty = \'\\\' + \' + $key + \' + \\\'\';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n        }\n      }}\n      {{? $noAdditional }}\n        {{? $removeAdditional }}\n          delete {{=$data}}[{{=$key}}];\n        {{??}}\n          {{=$nextValid}} = false;\n          {{\n            var $currErrSchemaPath = $errSchemaPath;\n            $errSchemaPath = it.errSchemaPath + \'/additionalProperties\';\n          }}\n          {{# def.error:\'additionalProperties\' }}\n          {{ $errSchemaPath = $currErrSchemaPath; }}\n          {{? $breakOnError }} break; {{?}}\n        {{?}}\n      {{?? $additionalIsSchema }}\n        {{? $removeAdditional == \'failing\' }}\n          var {{=$errs}} = errors;\n          {{# def.setCompositeRule }}\n\n          {{# def.validateAdditional }}\n\n          if (!{{=$nextValid}}) {\n            errors = {{=$errs}};\n            if (validate.errors !== null) {\n              if (errors) validate.errors.length = errors;\n              else validate.errors = null;\n            }\n            delete {{=$data}}[{{=$key}}];\n          }\n\n          {{# def.resetCompositeRule }}\n        {{??}}\n          {{# def.validateAdditional }}\n          {{? $breakOnError }} if (!{{=$nextValid}}) break; {{?}}\n        {{?}}\n      {{?}}\n      {{ it.errorPath = $currentErrorPath; }}\n    {{?}}\n    {{? $someProperties }}\n      }\n    {{?}}\n  }\n\n  {{# def.ifResultValid }}\n{{?}}\n\n{{ var $useDefaults = it.opts.useDefaults && !it.compositeRule; }}\n\n{{? $schemaKeys.length }}\n  {{~ $schemaKeys:$propertyKey }}\n    {{ var $sch = $schema[$propertyKey]; }}\n\n    {{? {{# def.nonEmptySchema:$sch}} }}\n      {{\n        var $prop = it.util.getProperty($propertyKey)\n          , $passData = $data + $prop\n          , $hasDefault = $useDefaults && $sch.default !== undefined;\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + $prop;\n        $it.errSchemaPath = $errSchemaPath + \'/\' + it.util.escapeFragment($propertyKey);\n        $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n        $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n      }}\n\n      {{# def.generateSubschemaCode }}\n\n      {{? {{# def.willOptimize }} }}\n        {{\n          $code = {{# def._optimizeValidate }};\n          var $useData = $passData;\n        }}\n      {{??}}\n        {{ var $useData = $nextData; }}\n        var {{=$nextData}} = {{=$passData}};\n      {{?}}\n\n      {{? $hasDefault }}\n        {{= $code }}\n      {{??}}\n        {{? $requiredHash && $requiredHash[$propertyKey] }}\n          if ({{=$useData}} === undefined) {\n            {{=$nextValid}} = false;\n            {{\n              var $currentErrorPath = it.errorPath\n                , $currErrSchemaPath = $errSchemaPath\n                , $missingProperty = it.util.escapeQuotes($propertyKey);\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n              $errSchemaPath = it.errSchemaPath + \'/required\';\n            }}\n            {{# def.error:\'required\' }}\n            {{ $errSchemaPath = $currErrSchemaPath; }}\n            {{ it.errorPath = $currentErrorPath; }}\n          } else {\n        {{??}}\n          {{? $breakOnError }}\n            if ({{=$useData}} === undefined) {\n              {{=$nextValid}} = true;\n            } else {\n          {{??}}\n            if ({{=$useData}} !== undefined) {\n          {{?}}\n        {{?}}\n\n          {{= $code }}\n        }\n      {{?}}  {{ /* $hasDefault */ }}\n    {{?}} {{ /* def.nonEmptySchema */ }}\n\n    {{# def.ifResultValid }}\n  {{~}}\n{{?}}\n\n{{~ $pPropertyKeys:$pProperty }}\n  {{ var $sch = $pProperties[$pProperty]; }}\n\n  {{? {{# def.nonEmptySchema:$sch}} }}\n    {{\n      $it.schema = $sch;\n      $it.schemaPath = it.schemaPath + \'.patternProperties\' + it.util.getProperty($pProperty);\n      $it.errSchemaPath = it.errSchemaPath + \'/patternProperties/\'\n                                           + it.util.escapeFragment($pProperty);\n    }}\n\n    for (var {{=$key}} in {{=$data}}) {\n      {{# def.checkOwnProperty }}\n      if ({{= it.usePattern($pProperty) }}.test({{=$key}})) {\n        {{\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + \'[\' + $key + \']\';\n          $it.dataPathArr[$dataNxt] = $key;\n        }}\n\n        {{# def.generateSubschemaCode }}\n        {{# def.optimizeValidate }}\n\n        {{? $breakOnError }} if (!{{=$nextValid}}) break; {{?}}\n      }\n      {{? $breakOnError }} else {{=$nextValid}} = true; {{?}}\n    }\n\n    {{# def.ifResultValid }}\n  {{?}} {{ /* def.nonEmptySchema */ }}\n{{~}}\n\n\n{{? it.opts.v5 }}\n  {{~ $pgPropertyKeys:$pgProperty }}\n    {{\n      var $pgSchema = $pgProperties[$pgProperty]\n        , $sch = $pgSchema.schema;\n    }}\n\n    {{? {{# def.nonEmptySchema:$sch}} }}\n      {{\n        $it.schema = $sch;\n        $it.schemaPath = it.schemaPath + \'.patternGroups\' + it.util.getProperty($pgProperty) + \'.schema\';\n        $it.errSchemaPath = it.errSchemaPath + \'/patternGroups/\'\n                                             + it.util.escapeFragment($pgProperty)\n                                             + \'/schema\';\n      }}\n\n      var pgPropCount{{=$lvl}} = 0;\n\n      for (var {{=$key}} in {{=$data}}) {\n        {{# def.checkOwnProperty }}\n        if ({{= it.usePattern($pgProperty) }}.test({{=$key}})) {\n          pgPropCount{{=$lvl}}++;\n\n          {{\n            $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n            var $passData = $data + \'[\' + $key + \']\';\n            $it.dataPathArr[$dataNxt] = $key;\n          }}\n\n          {{# def.generateSubschemaCode }}\n          {{# def.optimizeValidate }}\n\n          {{? $breakOnError }} if (!{{=$nextValid}}) break; {{?}}\n        }\n        {{? $breakOnError }} else {{=$nextValid}} = true; {{?}}\n      }\n\n      {{# def.ifResultValid }}\n\n      {{\n        var $pgMin = $pgSchema.minimum\n          , $pgMax = $pgSchema.maximum;\n      }}\n      {{? $pgMin !== undefined || $pgMax !== undefined }}\n        var {{=$valid}} = true;\n\n        {{ var $currErrSchemaPath = $errSchemaPath; }}\n\n        {{? $pgMin !== undefined }}\n          {{ var $limit = $pgMin, $reason = \'minimum\', $moreOrLess = \'less\'; }}\n          {{=$valid}} = pgPropCount{{=$lvl}} >= {{=$pgMin}};\n          {{ $errSchemaPath = it.errSchemaPath + \'/patternGroups/minimum\'; }}\n          {{# def.checkError:\'patternGroups\' }}\n          {{? $pgMax !== undefined }}\n            else\n          {{?}}\n        {{?}}\n\n        {{? $pgMax !== undefined }}\n          {{ var $limit = $pgMax, $reason = \'maximum\', $moreOrLess = \'more\'; }}\n          {{=$valid}} = pgPropCount{{=$lvl}} <= {{=$pgMax}};\n          {{ $errSchemaPath = it.errSchemaPath + \'/patternGroups/maximum\'; }}\n          {{# def.checkError:\'patternGroups\' }}\n        {{?}}\n\n        {{ $errSchemaPath = $currErrSchemaPath; }}\n\n        {{# def.ifValid }}\n      {{?}}\n    {{?}} {{ /* def.nonEmptySchema */ }}\n  {{~}}\n{{?}}\n\n\n{{? $breakOnError }}\n  {{= $closingBraces }}\n  if ({{=$errs}} == errors) {\n{{?}}\n\n{{# def.cleanUp }}\n');}return __p.join('');}