if(undefined==window.JST){window.JST={};} window.JST["format"] = function(obj){var __p=[],print=function(){__p.push.apply(__p,arguments);};with(obj||{}){__p.push('{{# def.definitions }}\n{{# def.errors }}\n{{# def.setupKeyword }}\n\n{{## def.skipFormat:\n  {{? $breakOnError }} if (true) { {{?}}\n  {{ return out; }}\n#}}\n\n{{? it.opts.format === false }}{{# def.skipFormat }}{{?}}\n\n\n{{# def.$data }}\n\n\n{{## def.$dataCheckFormat:\n  {{# def.$dataNotType:\'string\' }}\n  ({{? $unknownFormats === true || $allowUnknown }}\n     ({{=$schemaValue}} && !{{=$format}}\n      {{? $allowUnknown }}\n        && self._opts.unknownFormats.indexOf({{=$schemaValue}}) == -1\n      {{?}}) ||\n   {{?}}\n   ({{=$format}} && !(typeof {{=$format}} == \'function\'\n                     ? {{? it.async}}\n                        (async{{=$lvl}} ? {{=it.yieldAwait}} {{=$format}}({{=$data}}) : {{=$format}}({{=$data}}))\n                       {{??}}\n                        {{=$format}}({{=$data}})\n                       {{?}}\n                     : {{=$format}}.test({{=$data}}))))\n#}}\n\n{{## def.checkFormat:\n  {{\n    var $formatRef = \'formats\' + it.util.getProperty($schema);\n    if ($isObject) $formatRef += \'.validate\';\n  }}\n  {{? typeof $format == \'function\' }}\n    {{=$formatRef}}({{=$data}})\n  {{??}}\n    {{=$formatRef}}.test({{=$data}})\n  {{?}}\n#}}\n\n\n{{\n  var $unknownFormats = it.opts.unknownFormats\n    , $allowUnknown = Array.isArray($unknownFormats);\n}}\n\n{{? $isData }}\n  {{ var $format = \'format\' + $lvl; }}\n  var {{=$format}} = formats[{{=$schemaValue}}];\n  var isObject{{=$lvl}} = typeof {{=$format}} == \'object\'\n                          && !({{=$format}} instanceof RegExp)\n                          && {{=$format}}.validate;\n  if (isObject{{=$lvl}}) {\n    {{? it.async}}\n      var async{{=$lvl}} = {{=$format}}.async;\n    {{?}}\n    {{=$format}} = {{=$format}}.validate;\n  }\n  if ({{# def.$dataCheckFormat }}) {\n{{??}}\n  {{ var $format = it.formats[$schema]; }}\n  {{? !$format }}\n    {{? $unknownFormats === true || ($allowUnknown && $unknownFormats.indexOf($schema) == -1) }}\n      {{ throw new Error(\'unknown format "\' + $schema + \'" is used in schema at path "\' + it.errSchemaPath + \'"\'); }}\n    {{??}}\n      {{\n        if (!$allowUnknown) {\n          console.warn(\'unknown format "\' + $schema + \'" ignored in schema at path "\' + it.errSchemaPath + \'"\');\n          if ($unknownFormats !== \'ignore\')\n            console.warn(\'In the next major version it will throw exception. See option unknownFormats for more information\');\n        }\n      }}\n      {{# def.skipFormat }}\n    {{?}}\n  {{?}}\n  {{\n    var $isObject = typeof $format == \'object\'\n                    && !($format instanceof RegExp)\n                    && $format.validate;\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n  }}\n  {{? $async }}\n    {{\n      if (!it.async) throw new Error(\'async format in sync schema\');\n      var $formatRef = \'formats\' + it.util.getProperty($schema) + \'.validate\';\n    }}\n    if (!({{=it.yieldAwait}} {{=$formatRef}}({{=$data}}))) {\n  {{??}}\n    if (!{{# def.checkFormat }}) {\n  {{?}}\n{{?}}\n    {{# def.error:\'format\' }}\n  } {{? $breakOnError }} else { {{?}}\n');}return __p.join('');}