{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "/parallax-test/node_modules/iferr/test/index.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA;;EAAA,MAA8B,OAAA,CAAQ,iBAAR,CAA9B,EAAE,YAAA,KAAF,EAAS,aAAA,MAAT,EAAiB,eAAA;;EACjB,OAAwB,OAAA,CAAQ,QAAR,CAAxB,EAAS,UAAP,KAAF,EAAa,cAAA;;EAEb,WAAA,GAAc,SAAC,EAAD;WAAQ,EAAA,CAAO,IAAA,KAAA,CAAM,gBAAN,CAAP;EAAR;;EACd,WAAA,GAAc,SAAC,EAAD;WAAQ,EAAA,CAAG,IAAH;EAAR;;EACd,WAAA,GAAc,SAAA;AAAG,UAAU,IAAA,KAAA,CAAM,QAAN;EAAb;;EAEd,QAAA,CAAS,OAAT,EAAkB,SAAA;IAChB,EAAA,CAAG,oCAAH,EAAyC,SAAC,IAAD;aACvC,WAAA,CAAY,KAAA,CACV,SAAC,GAAD;QACE,EAAA,CAAG,GAAG,CAAC,OAAP,EAAgB,gBAAhB;eACG,IAAH,CAAA;MAFF,CADU,EAIV,SAAA;eACE,IAAA,CAAS,IAAA,KAAA,CAAM,sCAAN,CAAT;MADF,CAJU,CAAZ;IADuC,CAAzC;WASA,EAAA,CAAG,uCAAH,EAA4C,SAAC,IAAD;aAC1C,WAAA,CAAY,KAAA,CACV,SAAA;eAAG,IAAA,CAAS,IAAA,KAAA,CAAM,oCAAN,CAAT;MAAH,CADU,EAEV,IAFU,CAAZ;IAD0C,CAA5C;EAVgB,CAAlB;;EAgBA,QAAA,CAAS,QAAT,EAAmB,SAAA;WACjB,EAAA,CAAG,wCAAH,EAA6C,SAAC,IAAD;aAC3C,WAAA,CAAY,MAAA,CACV,SAAC,GAAD;QACE,EAAA,CAAG,GAAG,CAAC,OAAP,EAAgB,QAAhB;eACG,IAAH,CAAA;MAFF,CADU,EAIV,WAJU,CAAZ;IAD2C,CAA7C;EADiB,CAAnB;;EASA,QAAA,CAAS,UAAT,EAAqB,SAAA;IACnB,EAAA,CAAG,sCAAH,EAA2C,SAAC,IAAD;AACzC,UAAA;AAAA;eAAI,WAAA,CAAY,QAAA,CAAS,SAAA;iBACvB,IAAA,CAAK,sCAAL;QADuB,CAAT,CAAZ,EAAJ;OAAA,aAAA;QAEM;QACJ,EAAA,CAAG,GAAG,CAAC,OAAP,EAAgB,gBAAhB;eACG,IAAH,CAAA,EAJF;;IADyC,CAA3C;WAOA,EAAA,CAAG,6CAAH,EAAkD,SAAC,IAAD;aAChD,WAAA,CAAY,QAAA,CAAS,IAAT,CAAZ;IADgD,CAAlD;EARmB,CAArB;AAhCA",
  "sourcesContent": [
    "{ iferr, tiferr, throwerr } = require '../index.coffee'\n{ equal: eq, throws } = require 'assert'\n\ninvoke_fail = (cb) -> cb new Error 'callback error'\ninvoke_succ = (cb) -> cb null\nthrow_error = -> throw new Error 'thrown'\n\ndescribe 'iferr', ->\n  it 'calls the error callback on errors', (done) ->\n    invoke_fail iferr(\n      (err) ->\n        eq err.message, 'callback error'\n        do done\n      ->\n        done new Error 'shouldn\\'t call the success callback'\n    )\n\n  it 'calls the success callback on success', (done) ->\n    invoke_succ iferr(\n      -> done new Error 'shouldn\\'t call the error callback'\n      done\n    )\n\ndescribe 'tiferr', ->\n  it 'catches errors in the success callback', (done) ->\n    invoke_succ tiferr(\n      (err) ->\n        eq err.message, 'thrown'\n        do done\n      throw_error\n    )\n\ndescribe 'throwerr', ->\n  it 'throws errors passed to the callback', (done)->\n    try invoke_fail throwerr ->\n      done 'shouldn\\'t call the success callback'\n    catch err\n      eq err.message, 'callback error'\n      do done\n\n  it 'delegates to the success callback otherwise', (done) ->\n    invoke_succ throwerr done\n"
  ]
}